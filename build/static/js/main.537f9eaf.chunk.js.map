{"version":3,"sources":["shared/BlueToothCommands.js","components/DeviceSelector.js","components/ColorList.js","components/AnimationList.js","components/ChannelSelector.js","components/DisplayBuilder.js","App.js","serviceWorker.js","index.js"],"names":["serviceUUIDs","require","BlueToothCommands","encoder","TextEncoder","decoder","TextDecoder","runPromiseWithTimeout","functionToRun","timeout","a","timerPromise","Promise","resolve","reject","setTimeout","race","connect","disconnectListener","uuidArray","channelUUIDs","push","saveUUID","onUUID","commandUUID","serviceUUID","options","acceptAllDevices","optionalServices","navigator","bluetooth","requestDevice","device","addEventListener","gatt","server","disconnect","Error","isConnected","connected","bulkLoad","getPrimaryService","service","getCharacteristic","bulkReadUUID","char","readValue","data","lightsOn","getUint8","interiorLightsOn","command","readCommandData","buffer","slice","channelsData","i","endIndex","startIndex","readChannelData","channels","load","all","loadLightsOnData","loadCommandData","loadChannelData","loadInteriorLightsOnData","interiorOnUUID","value","uInt8Viewer","Uint8Array","uInt16Viewer","Uint16Array","primaryRed","primaryGreen","primaryBlue","secondaryRed","secondaryGreen","secondaryBlue","animation","stepDelay","isCentered","isInterior","stripUsed","directionFlipped","stripType","stripOrder","stripPosition","numLEDs","height","width","channelIndex","updateCommand","primaryColor","secondaryColor","ArrayBuffer","delay","buffer8bit","red","green","blue","writeValue","updateChannel","position","order","used","buffer16bit","save","characteristic","toggleLights","status","toggleInteriorLights","DeviceSelector","onDisconnected","props","stateUpdaters","updateDeviceState","message","includes","alert","state","deviceState","connectionStatus","selectedDevice","updateAllStates","e","toggleLightStatus","toggleInteriorLightStatus","getCurrentStatusBorderStyle","borderColor","getCurrentStatusTextStyle","color","getCurrentStatusText","getInteriorLightsToggleButton","console","log","className","onClick","getLightsToggleButton","getSaveButton","Fragment","componentDidUpdate","style","this","name","Component","newColor","ColorList","handleNewColor","hex","toUpperCase","addColor","type","primaryColorState","updatePrimaryColorState","colorList","secondaryColorState","updateSecondaryColorState","addColorToList","isPickingColor","cancelColor","handleSelectColor","rgb","r","g","b","getColorPickerHeaderText","getColorList","toggleCustomColorPicker","presetColors","disableAlpha","onChangeComplete","getSelectedColor","selectedColor","getColorString","toString","length","colors","animations","AnimationList","switchAnimation","index","indexOf","target","updateCommandState","commandState","getSelectedAnimation","getDelayValue","updateDelayValue","parseInt","isNaN","onChange","map","key","min","ChannelSelector","channelState","editedChannelDescription","channelDescriptions","id","selectedChannelList","getIntFromPosition","updateChannelState","intPosition","splitPosition","split","channelClicked","currentSelectedChannelList","getDisabledStatus","channelNum","getToggleStyle","channel","getTogglePositionStyle","switchEditingChannel","updateChannelPosition","updateStripType","updateInterior","checked","updateCentered","updateNumLEDs","updateHeight","updateWidth","updateColorOrder","addEditChannels","getNumLEDsValue","getHeight","getWidth","getSelectedChannel","getSelectedColorOrder","getSelectedStripType","getInteriorCheckedState","interiorValue","getCenteredCheckedState","showAddEditDescription","maxLength","disabled","DisplayBuilder","writeToDevice","err","App","setState","updates","getSelectedChannelList","getChannelDescriptions","descriptions","returnArray","getPositionFromInt","col","Math","floor","entry","showDisplayBuilder","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.537f9eaf.chunk.js","sourcesContent":["var serviceUUIDs = require('./uuids');\r\n\r\nexport default class BlueToothCommands {\r\n    static encoder = new TextEncoder();\r\n    static decoder = new TextDecoder('utf-8');\r\n\r\n    static runPromiseWithTimeout = async(functionToRun, timeout) => {\r\n        let timerPromise = new Promise((resolve, reject) => {\r\n            let wait = setTimeout(() => {\r\n              reject('TimedOut');\r\n            }, timeout)\r\n          })\r\n\r\n        return Promise.race([functionToRun, timerPromise])\r\n    }\r\n\r\n    static connect = async (disconnectListener) => {\r\n        let uuidArray = serviceUUIDs.channelUUIDs;\r\n        uuidArray.push(serviceUUIDs.saveUUID);\r\n        uuidArray.push(serviceUUIDs.onUUID);\r\n        uuidArray.push(serviceUUIDs.commandUUID);\r\n        uuidArray.push(serviceUUIDs.serviceUUID);\r\n        let options = {\r\n            acceptAllDevices: true,\r\n            optionalServices: uuidArray,\r\n            /*filters:[\r\n                {services: [serviceUUIDs.serviceUUID]}\r\n            ]*/\r\n        };\r\n        let server;\r\n        try{\r\n            let device = await navigator.bluetooth.requestDevice(options);\r\n            device.addEventListener('gattserverdisconnected', disconnectListener);\r\n            server = await this.runPromiseWithTimeout(device.gatt.connect(),10000);\r\n            return server;\r\n        }catch(e){\r\n            this.disconnect(server);\r\n            throw new Error(\"Bluetooth Connection: \"+e);\r\n        }\r\n    }\r\n\r\n    static disconnect = (server) => {\r\n        if(this.isConnected(server)){\r\n            server.disconnect();\r\n        }\r\n    }\r\n\r\n    static isConnected = (server) => {\r\n        let connected = false;\r\n        if(server && server.connected){\r\n          connected = true;\r\n        }\r\n        return connected;\r\n    }\r\n\r\n    static bulkLoad = async (server) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.bulkReadUUID),10000);\r\n            let data = await this.runPromiseWithTimeout(char.readValue(),10000);\r\n\r\n            let lightsOn = (data.getUint8(0) === 1) ? true : false;\r\n            let interiorLightsOn = (data.getUint8(1) === 1) ? true : false;\r\n            let command = this.readCommandData(data.buffer.slice(2,12))\r\n\r\n            let channelsData = [];\r\n            for(let i=0; i< 8; i++){\r\n                let startIndex = 12+(14*i);\r\n                let endIndex = startIndex + 14;\r\n                channelsData.push(this.readChannelData(data.buffer.slice(startIndex, endIndex)));\r\n            }\r\n            \r\n            return {\r\n                lightsOn: lightsOn,\r\n                interiorLightsOn: interiorLightsOn,\r\n                command: command,\r\n                channels: channelsData\r\n            }\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error(\"Bluetooth Bulk Load: \"+error);\r\n        }\r\n    }\r\n\r\n    static load = async (server) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let data = await Promise.all([\r\n                this.loadLightsOnData(service),\r\n                this.loadCommandData(service),\r\n                this.loadChannelData(service, 0),\r\n                this.loadChannelData(service, 1),\r\n                this.loadChannelData(service, 2),\r\n                this.loadChannelData(service, 3),\r\n                this.loadChannelData(service, 4),\r\n                this.loadChannelData(service, 5),\r\n                this.loadChannelData(service, 6),\r\n                this.loadChannelData(service, 7)\r\n            ]);\r\n            return {\r\n                lightsOn: data[0],\r\n                command: data[1],\r\n                channels: data.slice(2)\r\n            }\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Load: \"+error);\r\n        }\r\n    }\r\n\r\n    static loadInteriorLightsOnData = async (service) => {\r\n        try{\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.interiorOnUUID),10000);\r\n            let value = await this.runPromiseWithTimeout(char.readValue(),10000);\r\n            return (value.getUint8(0) === 1) ? true : false;\r\n        }catch(error){\r\n            throw new Error (\"Bluetooth Load Interior Light: \"+error);\r\n        }\r\n    }\r\n\r\n    static loadLightsOnData = async (service) => {\r\n        try{\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.onUUID),10000);\r\n            let value = await this.runPromiseWithTimeout(char.readValue(),10000);\r\n            return (value.getUint8(0) === 1) ? true : false;\r\n        }catch(error){\r\n            throw new Error (\"Bluetooth Load Light: \"+error);\r\n        }\r\n    }\r\n\r\n    static readCommandData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            primaryRed: uInt8Viewer[0],\r\n            primaryGreen: uInt8Viewer[1],\r\n            primaryBlue: uInt8Viewer[2],\r\n            secondaryRed: uInt8Viewer[3],\r\n            secondaryGreen: uInt8Viewer[4],\r\n            secondaryBlue: uInt8Viewer[5],\r\n            animation: uInt8Viewer[6],\r\n            stepDelay: uInt16Viewer[4]\r\n        }\r\n    }\r\n\r\n    static loadCommandData = async (service) => {\r\n        try{\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.commandUUID),10000);\r\n            let value = await this.runPromiseWithTimeout(char.readValue(),10000);\r\n            return this.readCommandData(value);\r\n        }catch(error){\r\n            throw new Error (\"Bluetooth Load Command: \"+error);\r\n        }\r\n    }\r\n\r\n    static readChannelData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            isCentered: uInt8Viewer[0],\r\n            isInterior: uInt8Viewer[1],\r\n            stripUsed: uInt8Viewer[2],\r\n            directionFlipped: uInt8Viewer[3],\r\n            stripType: uInt8Viewer[4],\r\n            stripOrder: uInt8Viewer[5],\r\n            stripPosition: uInt8Viewer[6],\r\n            numLEDs: uInt16Viewer[4], //TODO: Verify if this is correct\r\n            height: uInt16Viewer[5],\r\n            width: uInt16Viewer[6]\r\n        }\r\n    }\r\n\r\n    static loadChannelData = async (service, channelIndex) => {\r\n        try{\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]),10000);\r\n            let value = await this.runPromiseWithTimeout(char.readValue(),10000);\r\n            return this.readChannelData(value);\r\n        }catch(error){\r\n            throw new Error (\"Bluetooth Load Channel: \"+error);\r\n        }\r\n    }\r\n\r\n    static updateCommand = async (server, primaryColor, secondaryColor, command) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.commandUUID),10000);\r\n    \r\n            let buffer = new ArrayBuffer(2); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            buffer16bit[0] = command.delay; //put value in as 16 bit value\r\n            let buffer8bit = new Uint8Array(buffer);\r\n    \r\n            let data = new Uint8Array([\r\n                primaryColor.red,\r\n                primaryColor.green,\r\n                primaryColor.blue,\r\n                secondaryColor.red,\r\n                secondaryColor.green,\r\n                secondaryColor.blue,\r\n                command.animation,\r\n                0, //unknown 0 here for some reason???\r\n                buffer8bit[0], //pull out as 2 8 bit values\r\n                buffer8bit[1]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Update Command: \"+error);\r\n        }\r\n    }\r\n\r\n    static updateChannel = async (server, channelIndex, stripType, numLEDs, position, order, used, isInterior, isCentered, height, width) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let char = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]),10000);\r\n    \r\n            let buffer = new ArrayBuffer(6); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            let buffer8bit = new Uint8Array(buffer);\r\n            buffer16bit[0] = numLEDs; //put value in as 16 bit value\r\n            buffer16bit[1] = height;\r\n            buffer16bit[2] = width;\r\n    \r\n            let data = new Uint8Array([\r\n                isCentered,\r\n                isInterior,\r\n                used,\r\n                stripType,\r\n                order,\r\n                position,\r\n                buffer8bit[0],\r\n                buffer8bit[1],\r\n                buffer8bit[2],\r\n                buffer8bit[3],\r\n                buffer8bit[4],\r\n                buffer8bit[5]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Update Channel: \"+error);\r\n        }\r\n    }\r\n\r\n    static save = async (server) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let characteristic = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.saveUUID),10000);\r\n            let value = new Uint8Array([1]);//false is [0]\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Save: \"+error);\r\n        }\r\n    }\r\n\r\n    static toggleLights = async (server, status) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let value = (status) ? new Uint8Array([0]) : new Uint8Array([1])\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let characteristic = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.onUUID),10000);\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Update Lights: \"+error);\r\n        }\r\n    }\r\n\r\n    static toggleInteriorLights = async (server, status) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await this.runPromiseWithTimeout(server.connect(),10000);\r\n            }\r\n            let value = (status) ? new Uint8Array([0]) : new Uint8Array([1])\r\n            let service = await this.runPromiseWithTimeout(server.getPrimaryService(serviceUUIDs.serviceUUID),10000);\r\n            let characteristic = await this.runPromiseWithTimeout(service.getCharacteristic(serviceUUIDs.interiorOnUUID),10000);\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            this.disconnect(server);\r\n            throw new Error (\"Bluetooth Update InteriorLights: \"+error);\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DeviceSelector.css';\r\n\r\nclass DeviceSelector extends Component {\r\n\r\n  connect = async () => {\r\n    try{\r\n      let device = await BlueToothCommands.connect(this.onDisconnected);\r\n      this.props.stateUpdaters.updateDeviceState(device, 1, true);\r\n    }catch(e){\r\n      if(e.message.includes(\"User cancelled the requestDevice() chooser\") === false){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnect = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      BlueToothCommands.disconnect(this.props.state.deviceState.selectedDevice);\r\n    }\r\n  }\r\n\r\n  onDisconnected = () => {\r\n    this.props.stateUpdaters.updateDeviceState(null, 0, true);\r\n  }\r\n\r\n  load = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      try{\r\n        let data = await BlueToothCommands.bulkLoad(this.props.state.deviceState.selectedDevice);\r\n        this.props.stateUpdaters.updateAllStates({server: this.props.state.deviceState.selectedDevice, data: data});\r\n      }catch(e){\r\n        this.onDisconnected();\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  save = async () => {\r\n    if(this.props.state.deviceState.selectedDevice){\r\n      try{\r\n        BlueToothCommands.save(this.props.state.deviceState.selectedDevice);\r\n      }catch(e){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleLightStatus = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      try{\r\n        let status = await BlueToothCommands.toggleLights(this.props.state.deviceState.selectedDevice, this.props.state.deviceState.lightsOn);\r\n        if(status){//success\r\n          this.props.stateUpdaters.updateDeviceState(\r\n            this.props.state.deviceState.selectedDevice,\r\n            this.props.state.deviceState.connectionStatus,\r\n            !this.props.state.deviceState.lightsOn,\r\n            this.props.state.deviceState.interiorLightsOn\r\n          );\r\n        }\r\n      }catch(e){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleInteriorLightStatus = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      try{\r\n        let status = await BlueToothCommands.toggleInteriorLights(this.props.state.deviceState.selectedDevice, this.props.state.deviceState.interiorLightsOn);\r\n        if(status){//success\r\n          this.props.stateUpdaters.updateDeviceState(\r\n            this.props.state.deviceState.selectedDevice,\r\n            this.props.state.deviceState.connectionStatus,\r\n            this.props.state.deviceState.lightsOn,\r\n            !this.props.state.deviceState.interiorLightsOn\r\n          );\r\n        }\r\n      }catch(e){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusBorderStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        borderColor: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        borderColor: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        borderColor: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusTextStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        color: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        color: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        color: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusText = () => {\r\n    let status = \"Status: \";\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      status += \"Disconnected\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      status += \"Loading saved data...\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      status += \"Connected\";\r\n    }\r\n    return status;\r\n  }\r\n\r\n  getInteriorLightsToggleButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      console.log(this.props.state.deviceState.interiorLightsOn)\r\n      if(this.props.state.deviceState.interiorLightsOn){\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleInteriorLightStatus}>Toggle Interior Lights Off</button></div>\r\n      }else{\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleInteriorLightStatus}>Toggle Interior Lights On</button></div>\r\n      }\r\n    }\r\n  }\r\n\r\n  getLightsToggleButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      if(this.props.state.deviceState.lightsOn){\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights Off</button></div>\r\n      }else{\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights On</button></div>\r\n      }\r\n    }\r\n  }\r\n\r\n  getSaveButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      return <React.Fragment>\r\n        <button className=\"saveButton\" onClick={this.save}>Save CommandSet</button>\r\n      </React.Fragment>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"selectorMainDiv\" style = {this.getCurrentStatusBorderStyle()}>\r\n        <h2>Device Selector</h2>\r\n        <button className=\"selectorButton\" onClick={this.connect}>Connect Device</button>\r\n        <button className=\"selectorButton\" onClick={this.disconnect}>Disconnect Device</button>\r\n        <div className=\"selectorLabelDiv\">\r\n          <div>\r\n            <label className=\"selectorLabel\">Name: {(this.props.state.deviceState.selectedDevice) ? this.props.state.deviceState.selectedDevice.device.name : \"\"}</label>\r\n          </div>\r\n          <div>\r\n            <label className=\"selectorLabel\" style={this.getCurrentStatusTextStyle()}>{this.getCurrentStatusText()}</label>\r\n          </div>\r\n          <div>\r\n            {this.getSaveButton()}\r\n          </div>\r\n          {this.getLightsToggleButton()}\r\n          {this.getInteriorLightsToggleButton()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      this.load();\r\n    }\r\n  }  \r\n}\r\nDeviceSelector.propTypes = {\r\n  state: PropTypes.object.isRequired\r\n}\r\n\r\nexport default DeviceSelector;\r\n","import React, { Component } from 'react'\r\nimport { SketchPicker } from 'react-color';\r\nimport { CirclePicker } from 'react-color';\r\nimport './../css/ColorList.css';\r\n\r\nvar newColor = null;\r\n\r\nclass ColorList extends Component {\r\n\r\n    handleNewColor = (color, e) => {\r\n        newColor = color.hex.toUpperCase();\r\n    }\r\n\r\n    addColor = (e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    addColorToList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    cancelColor = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    handleSelectColor = (color, e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }\r\n    }\r\n\r\n    getColorPickerHeaderText = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return \"Select Primary Color\";\r\n        }else{\r\n            return \"Select Secondary Color\";\r\n        }\r\n    }\r\n\r\n    getColorList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return this.props.state.primaryColorState.colorList;\r\n        }else{\r\n            return this.props.state.secondaryColorState.colorList;\r\n        }\r\n    }\r\n\r\n    toggleCustomColorPicker = () => {\r\n        let colorState = (this.props.type === \"primary\") ? this.props.state.primaryColorState : this.props.state.secondaryColorState\r\n        \r\n        if(colorState.isPickingColor){\r\n            return (\r\n                <div>\r\n                    <SketchPicker presetColors={[]} disableAlpha={true} width=\"250px\" onChangeComplete={this.handleNewColor}/>\r\n                    <button onClick={this.addColorToList}>Add</button>\r\n                    <button onClick={this.cancelColor}>Cancel</button>\r\n                </div>\r\n            )\r\n        }else{\r\n            return <button onClick={this.addColor} >Add Custom Color</button>\r\n        }\r\n    }\r\n\r\n    getSelectedColor = () => {\r\n        let selectedColor = null;\r\n        let colorList = null;\r\n        if(this.props.type === \"primary\"){\r\n            selectedColor = this.getColorString(\r\n                this.props.state.primaryColorState.red,\r\n                this.props.state.primaryColorState.green,\r\n                this.props.state.primaryColorState.blue\r\n            );\r\n            colorList = this.props.state.primaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.primaryColorState.red,\r\n                    g: this.props.state.primaryColorState.green,\r\n                    b: this.props.state.primaryColorState.blue\r\n                }});\r\n            }\r\n        }else{\r\n            selectedColor = this.getColorString(\r\n                this.props.state.secondaryColorState.red,\r\n                this.props.state.secondaryColorState.green,\r\n                this.props.state.secondaryColorState.blue\r\n            );\r\n            colorList = this.props.state.secondaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.secondaryColorState.red,\r\n                    g: this.props.state.secondaryColorState.green,\r\n                    b: this.props.state.secondaryColorState.blue\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    getColorString = (r, g, b) => {\r\n        let red = r.toString(16).toUpperCase();\r\n        let green = g.toString(16).toUpperCase();\r\n        let blue = b.toString(16).toUpperCase();\r\n        if(red.length === 1){\r\n            red = \"0\"+red;\r\n        }\r\n        if(green.length === 1){\r\n            green = \"0\"+green;\r\n        }\r\n        if(blue.length === 1){\r\n            blue = \"0\"+blue;\r\n        }\r\n        return \"#\"+red+green+blue;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"colorListMainDiv\">\r\n                <h3>{this.getColorPickerHeaderText()}</h3>\r\n                <div className=\"circlePickerDiv\">\r\n                    <CirclePicker colors={this.getColorList()} width=\"295px\" onChangeComplete={this.handleSelectColor} color={this.getSelectedColor()}/>\r\n                </div>\r\n                {this.toggleCustomColorPicker()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorList;","import React, { Component } from 'react'\r\nimport './../css/AnimationList.css';\r\n\r\nconst animations = [\r\n    \"Static\",\r\n    \"Blink\",\r\n    \"Pulse\",\r\n    \"Wave\",\r\n    \"Wave Alternate\",\r\n    \"Roll\",\r\n    \"Roll Alternate\",\r\n    \"Stack\",\r\n    \"Stack Alternate\"\r\n];\r\n\r\nexport class AnimationList extends Component {\r\n\r\n    switchAnimation = (e) => {\r\n        let index = animations.indexOf(e.target.value);\r\n        if(index > -1){\r\n            this.props.stateUpdaters.updateCommandState(index, this.props.state.commandState.delay);\r\n        }\r\n    }\r\n\r\n    getSelectedAnimation = () => {\r\n        return animations[this.props.state.commandState.animation];\r\n    }\r\n\r\n    getDelayValue = () => {\r\n        return this.props.state.commandState.delay;\r\n    }\r\n\r\n    updateDelayValue = (e) => {\r\n        let delay = parseInt(e.target.value);\r\n        if(isNaN(delay) || delay < 10){\r\n            delay = 10;\r\n        }\r\n        this.props.stateUpdaters.updateCommandState(this.props.state.commandState.animation, delay);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"animationListMainDiv\">\r\n                <h3>Select Animation</h3>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Animation: \r\n                        <select className=\"inRowDisplayInput\" onChange={this.switchAnimation} value={this.getSelectedAnimation()}>\r\n                            {animations.map(animation => <option key={animation} value={animation}> {animation} </option>)}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Delay:<input className=\"inRowDisplayInput indentText\" type=\"number\" min=\"10\" name=\"delay\" value={this.getDelayValue()} onChange={this.updateDelayValue}/></label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnimationList\r\n","import React, { Component } from 'react'\r\nimport './../css/ChannelSelector.css';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\n\r\nexport class ChannelSelector extends Component {\r\n\r\n    updateChannel = async (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null && this.props.state.channelState.channelDescriptions !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = (this.props.state.channelState.editedChannelDescription.numLEDs !== null) ? this.props.state.channelState.editedChannelDescription.numLEDs : this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            let type = (this.props.state.channelState.editedChannelDescription.type !== null) ? this.props.state.channelState.editedChannelDescription.type : this.props.state.channelState.channelDescriptions[id].type\r\n            let order = (this.props.state.channelState.editedChannelDescription.order !== null) ? this.props.state.channelState.editedChannelDescription.order : this.props.state.channelState.channelDescriptions[id].order\r\n            let position = (this.props.state.channelState.editedChannelDescription.position !== null) ? this.props.state.channelState.editedChannelDescription.position : this.props.state.channelState.channelDescriptions[id].position\r\n            let used = this.props.state.channelState.selectedChannelList[id];\r\n            let isInterior = (this.props.state.channelState.editedChannelDescription.isInterior !== null) ? this.props.state.channelState.editedChannelDescription.isInterior : this.props.state.channelState.channelDescriptions[id].isInterior\r\n            let isCentered = (this.props.state.channelState.editedChannelDescription.isCentered !== null) ? this.props.state.channelState.editedChannelDescription.isCentered : this.props.state.channelState.channelDescriptions[id].isCentered\r\n            let height = (this.props.state.channelState.editedChannelDescription.height !== null) ? this.props.state.channelState.editedChannelDescription.height : this.props.state.channelState.channelDescriptions[id].height\r\n            let width = (this.props.state.channelState.editedChannelDescription.width !== null) ? this.props.state.channelState.editedChannelDescription.width : this.props.state.channelState.channelDescriptions[id].width;\r\n\r\n            try{\r\n                let status = await BlueToothCommands.updateChannel(\r\n                    this.props.state.deviceState.selectedDevice,\r\n                    id,\r\n                    type,\r\n                    numLEDs,\r\n                    this.getIntFromPosition(position),\r\n                    order,\r\n                    used,\r\n                    isInterior,\r\n                    isCentered,\r\n                    height,\r\n                    width\r\n                );\r\n    \r\n                if(status){\r\n                    let channelDescriptions = this.props.state.channelState.channelDescriptions;\r\n                    channelDescriptions[id].numLEDs = numLEDs;\r\n                    channelDescriptions[id].type = type;\r\n                    channelDescriptions[id].order = order;\r\n                    channelDescriptions[id].position = position;\r\n                    channelDescriptions[id].isInterior = isInterior;\r\n                    channelDescriptions[id].isCentered = isCentered;\r\n                    this.props.stateUpdaters.updateChannelState(\r\n                        this.props.state.channelState.selectedChannelList,\r\n                        channelDescriptions,\r\n                        {   \r\n                            id: id,\r\n                            type: null,\r\n                            numLEDs: null,\r\n                            position: null,\r\n                            order: null,\r\n                            isInterior: null,\r\n                            isCentered: null,\r\n                            height: null,\r\n                            width: null\r\n                        }\r\n                    );\r\n                }\r\n            }catch(e){\r\n                alert(e);\r\n            }\r\n        }else{\r\n            //there is nothing to update\r\n        }\r\n    }\r\n\r\n    getIntFromPosition = (position) => {\r\n        let intPosition = 0;\r\n        let splitPosition = position.split(\":\");\r\n        intPosition = parseInt(splitPosition[0]) * 4\r\n        intPosition += parseInt(splitPosition[1]);\r\n        return intPosition;\r\n    }\r\n\r\n    channelClicked = (e) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        currentSelectedChannelList[e.target.value] = (currentSelectedChannelList[e.target.value] === true) ? false : true\r\n        this.props.stateUpdaters.updateChannelState(\r\n            currentSelectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            this.props.state.channelState.editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getDisabledStatus = (channelNum) => {\r\n        if(this.props.state.channelState.channelDescriptions !== null){\r\n            if(this.props.state.channelState.channelDescriptions[channelNum].stripType === 0){\r\n                return true;\r\n            }else if(this.props.state.channelState.channelDescriptions[channelNum].stripType === null){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getToggleStyle = (channel) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        let channelFound = currentSelectedChannelList[channel];\r\n        if(channelFound){\r\n            return \"channelButtonSelected\"\r\n        }else{\r\n            return \"channelButton\"\r\n        }\r\n    }\r\n\r\n    getTogglePositionStyle = (value) => {\r\n        if(this.props.state.channelState.editedChannelDescription != null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let position = this.props.state.channelState.editedChannelDescription.position;\r\n            if(position !== null){\r\n                if(value === position){\r\n                    return \"channelPositionSelectedUsed\";\r\n                }else{\r\n                    return \"channelPosition\";\r\n                }\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && value === this.props.state.channelState.channelDescriptions[id].position){\r\n                return \"channelPositionSelectedUsed\";\r\n            }else{\r\n                return \"channelPosition\";\r\n            }\r\n        }else{\r\n           return \"channelPosition\";\r\n        }\r\n    }\r\n\r\n    switchEditingChannel = (e) => {\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            {\r\n                id: parseInt(e.target.value),\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null,\r\n                isInterior: null,\r\n                isCentered: null,\r\n                height: null,\r\n                width: null\r\n            }\r\n        );\r\n    }\r\n\r\n    updateChannelPosition = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.position = e.target.value;\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateStripType = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.type = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateInterior = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.isInterior = e.target.checked\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateCentered = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.isCentered = e.target.checked\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateNumLEDs = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.numLEDs = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateHeight = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.height = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateWidth = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.width = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateColorOrder = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.order = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    addEditChannels = () => {\r\n        let editedChannelDescription = null;\r\n        if(this.props.state.channelState.editedChannelDescription === null){\r\n            editedChannelDescription = {\r\n                id: 0,\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null,\r\n                isInterior: null,\r\n                isCentered: null,\r\n                height: null,\r\n                width: null\r\n            }\r\n        }\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getNumLEDsValue = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = this.props.state.channelState.editedChannelDescription.numLEDs;\r\n            if(numLEDs !== null){\r\n                return numLEDs\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].numLEDs !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getHeight = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let height = this.props.state.channelState.editedChannelDescription.height;\r\n            if(height !== null){\r\n                return height\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].height !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].height\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getWidth = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let width = this.props.state.channelState.editedChannelDescription.width;\r\n            if(width !== null){\r\n                return width\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].width !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].width\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedChannel = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return this.props.state.channelState.editedChannelDescription.id;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedColorOrder = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let order = this.props.state.channelState.editedChannelDescription.order;\r\n            if(order !== null){\r\n                return order\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].order !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].order\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedStripType = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let type = this.props.state.channelState.editedChannelDescription.type;\r\n            if(type !== null){\r\n                return type\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].type !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].type\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getInteriorCheckedState = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let interiorValue = this.props.state.channelState.editedChannelDescription.isInterior;\r\n            if(interiorValue != null) {\r\n                return interiorValue\r\n            }else if(this.props.state.channelState.channelDescriptions !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].isInterior\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getCenteredCheckedState = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let interiorValue = this.props.state.channelState.editedChannelDescription.isCentered;\r\n            if(interiorValue != null) {\r\n                return interiorValue\r\n            }else if(this.props.state.channelState.channelDescriptions !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].isCentered\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showAddEditDescription = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return <React.Fragment>\r\n                <div className=\"channelAddEditDiv\">\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Channel:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" onChange={this.switchEditingChannel} value={this.getSelectedChannel()}>\r\n                                <option value={0}>0</option>\r\n                                <option value={1}>1</option>\r\n                                <option value={2}>2</option>\r\n                                <option value={3}>3</option>\r\n                                <option value={4}>4</option>\r\n                                <option value={5}>5</option>\r\n                                <option value={6}>6</option>\r\n                                <option value={7}>7</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>LED Count:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"numLEDs\" value={this.getNumLEDsValue()} maxLength=\"3\" onChange={this.updateNumLEDs}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Height:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"height\" value={this.getHeight()} maxLength=\"3\" onChange={this.updateHeight}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Width:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"width\" value={this.getWidth()} maxLength=\"3\" onChange={this.updateWidth}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Color Order:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" value={this.getSelectedColorOrder()} onChange={this.updateColorOrder}>\r\n                                <option value={0}>RGB</option>\r\n                                <option value={1}>RBG</option>\r\n                                <option value={2}>BRG</option>\r\n                                <option value={3}>BGR</option>\r\n                                <option value={4}>GBR</option>\r\n                                <option value={5}>GRB</option>\r\n                            </select>\r\n                        </div>                        \r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Strip Type:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" value={this.getSelectedStripType()} onChange={this.updateStripType}>\r\n                                <option value={0}>NONE</option>\r\n                                <option value={1}>NEO KHZ800</option>\r\n                                <option value={2}>NEO KHZ400</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='column inlineColumn'>\r\n                            <input name=\"isInterior\" type=\"checkbox\" checked={this.getInteriorCheckedState()} onChange={this.updateInterior}/>\r\n                            <label>In Interior?</label>\r\n                        </div>\r\n                        <div className=\"column inlineColumn\">\r\n                            <input name=\"isCentered\" type=\"checkbox\" checked={this.getCenteredCheckedState()} onChange={this.updateCentered}/>\r\n                            <label>Is Centered?</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"channelPositionDiv\" >\r\n                        <label>Strip Position:\r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"0:0\")} type=\"button\" value=\"0:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:1\")} type=\"button\" value=\"0:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:2\")} type=\"button\" value=\"0:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"1:0\")} type=\"button\" value=\"1:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:1\")} type=\"button\" value=\"1:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:2\")} type=\"button\" value=\"1:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"2:0\")} type=\"button\" value=\"2:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:1\")} type=\"button\" value=\"2:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:2\")} type=\"button\" value=\"2:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"3:0\")} type=\"button\" value=\"3:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:1\")} type=\"button\" value=\"3:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:2\")} type=\"button\" value=\"3:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <input className=\"channelButton channelInput\" type=\"button\" value=\"Update Channel\" onClick={this.updateChannel}/>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"channelSelectorMainDiv\">\r\n                <h3>Select Channels</h3>\r\n                <div className=\"channelsDiv\">\r\n                    <input className=\"channelButton channelInput\" type=\"button\" name=\"addEditChannels\" value=\"Add/Edit Channels\" onClick={this.addEditChannels}/>\r\n                    {this.showAddEditDescription()}\r\n                    <div>\r\n                        <input disabled={this.getDisabledStatus(0)} className={this.getToggleStyle(0)} type=\"button\" name=\"channel0\" value={0} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(1)} className={this.getToggleStyle(1)} type=\"button\" name=\"channel1\" value={1} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(2)} className={this.getToggleStyle(2)} type=\"button\" name=\"channel2\" value={2} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(3)} className={this.getToggleStyle(3)} type=\"button\" name=\"channel3\" value={3} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(4)} className={this.getToggleStyle(4)} type=\"button\" name=\"channel4\" value={4} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(5)} className={this.getToggleStyle(5)} type=\"button\" name=\"channel5\" value={5} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(6)} className={this.getToggleStyle(6)} type=\"button\" name=\"channel6\" value={6} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(7)} className={this.getToggleStyle(7)} type=\"button\" name=\"channel7\" value={7} onClick={this.channelClicked}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChannelSelector\r\n","import React, { Component } from 'react';\r\nimport ColorList from './ColorList';\r\nimport AnimationList from './AnimationList';\r\nimport ChannelSelector from './ChannelSelector';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DisplayBuilder.css';\r\n\r\nexport class DisplayBuilder extends Component {\r\n\r\n    writeToDevice = async (e) => {\r\n        try{\r\n            BlueToothCommands.updateCommand(\r\n                this.props.state.deviceState.selectedDevice,\r\n                this.props.state.primaryColorState,\r\n                this.props.state.secondaryColorState,\r\n                this.props.state.commandState\r\n            );\r\n        }catch(err){\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"displayBuilderMainDiv\">\r\n                <h2>Display Builder</h2>\r\n                <ChannelSelector state={this.props.state} stateUpdaters={this.props.stateUpdaters} />\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"primary\"/>\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"secondary\"/>\r\n                <AnimationList state={this.props.state} stateUpdaters={this.props.stateUpdaters}/>\r\n                <div>\r\n                    <input className=\"displayBuilderButton\" type=\"button\" value=\"Write To Device\" onClick={this.writeToDevice}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayBuilder","import React from 'react';\nimport DeviceSelector from './components/DeviceSelector';\nimport DisplayBuilder from './components/DisplayBuilder';\n\nimport './css/App.css';\n\nclass App extends React.Component {\n\n  state = {\n    deviceState: {\n      selectedDevice: null,\n      connectionStatus: 0, //0 is disconnected, 1 is connecting, 2 is connected\n      lightsOn: true,\n      interiorLightsOn: true\n    },\n    channelState: {\n      selectedChannelList: [false, false, false, false, false, false, false, false],\n      channelDescriptions: null,\n      editedChannelDescription: null\n    },\n    primaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    secondaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    commandState: {\n      animation: 0,\n      delay: 0,\n    }\n  }\n\n  updateDeviceState = (selectedDevice, connectionStatus, lightsOn, interiorLightsOn) =>{\n    let state = {\n      selectedDevice: selectedDevice,\n      connectionStatus: connectionStatus,\n      lightsOn: lightsOn,\n      interiorLightsOn: interiorLightsOn\n    }\n    this.setState({deviceState: state});\n  }\n\n  updateChannelState = (selectedChannelList, channelDescriptions, editedChannelDescription) => {\n    let state = {\n      selectedChannelList: selectedChannelList,\n      channelDescriptions: channelDescriptions,\n      editedChannelDescription: editedChannelDescription\n    }\n    this.setState({channelState: state});\n  }\n\n  updatePrimaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({primaryColorState: state});\n  }\n\n  updateSecondaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({secondaryColorState: state});\n  }\n\n  updateCommandState = (animation, delay) => {\n    let state = {\n      animation: animation,\n      delay: delay\n    }\n    this.setState({commandState: state});\n  }\n\n  updateAllStates = (updates) => {\n    try{\n      let deviceState = {\n        selectedDevice: updates.server,\n        connectionStatus: 2, //connected\n        lightsOn: updates.data.lightsOn,\n        interiorLightsOn: updates.data.interiorLightsOn\n      }\n\n      let primaryColorState = {\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.primaryRed,\n        green: updates.data.command.primaryGreen,\n        blue: updates.data.command.primaryBlue\n      }\n\n      let secondaryColorState = { //currently matches primary, need to add full secondary color functionality\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.secondaryRed,\n        green: updates.data.command.secondaryGreen,\n        blue: updates.data.command.secondaryBlue\n      }\n\n      let commandState = {\n        animation: updates.data.command.animation,\n        delay: updates.data.command.stepDelay\n      }\n\n      let channelState = {\n        selectedChannelList: this.getSelectedChannelList(updates.data.channels),\n        channelDescriptions: this.getChannelDescriptions(updates.data.channels),\n        editedChannelDescription: null\n      }\n\n      this.setState({\n        deviceState: deviceState,\n        channelState: channelState,\n        primaryColorState: primaryColorState,\n        secondaryColorState: secondaryColorState,\n        commandState: commandState\n      });\n    }catch(e){\n      alert(e);\n    }\n  }\n\n  getSelectedChannelList = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      if(descriptions != null && descriptions[i] != null){\n        if(descriptions[i].stripUsed === 1){\n          returnArray.push(true);\n        }else{\n          returnArray.push(false);\n        }\n      }else{\n        returnArray.push(false);\n      }\n    }\n    return returnArray;\n  }\n\n  getPositionFromInt = (intPosition) => {\n    let numCols = 3;\n    let row = Math.floor(intPosition / numCols);\n    let col = intPosition % numCols;\n    return row.toString() +\":\"+col.toString()\n  }\n\n  getChannelDescriptions = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      let entry = null;\n      if(descriptions != null && descriptions[i] != null){\n        entry = {\n          id: i,\n          type: descriptions[i].stripType,\n          numLEDs: descriptions[i].numLEDs,\n          position: this.getPositionFromInt(descriptions[i].stripPosition),\n          order: descriptions[i].stripOrder,\n          used: descriptions[i].stripUsed,\n          isInterior: descriptions[i].isInterior,\n          isCentered: descriptions[i].isCentered,\n          height: descriptions[i].height,\n          width: descriptions[i].width\n        }\n      }else{\n        entry = {\n          id: i,\n          type: null,\n          numLEDs: null,\n          position: null,\n          order: null,\n          used: false,\n          isInterior: false,\n          isCentered: false,\n          height: null,\n          width: null\n        }\n      }\n      returnArray.push(entry);\n    }\n    return returnArray;\n  }\n\n  stateUpdaters = {\n    updateDeviceState: this.updateDeviceState,\n    updateChannelState: this.updateChannelState,\n    updatePrimaryColorState: this.updatePrimaryColorState,\n    updateSecondaryColorState: this.updateSecondaryColorState,\n    updateCommandState: this.updateCommandState,\n    updateAllStates: this.updateAllStates\n  }\n\n  showDisplayBuilder = () =>{\n    if(this.state.deviceState.connectionStatus === 2){ //should check for 2 (connected), using 0 while in development\n      return (\n        <React.Fragment>\n          <DisplayBuilder state={this.state} stateUpdaters={this.stateUpdaters}/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <DeviceSelector stateUpdaters={this.stateUpdaters} state={this.state} />\n        {this.showDisplayBuilder()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}