{"version":3,"sources":["shared/BlueToothCommands.js","components/DeviceSelector.js","components/ColorList.js","components/AnimationList.js","components/ChannelSelector.js","components/DisplayBuilder.js","App.js","serviceWorker.js","index.js"],"names":["serviceUUIDs","require","BlueToothCommands","encoder","TextEncoder","decoder","TextDecoder","connect","disconnectListener","a","async","uuidArray","channelUUIDs","push","saveUUID","onUUID","commandUUID","serviceUUID","options","acceptAllDevices","optionalServices","navigator","bluetooth","requestDevice","device","addEventListener","gatt","server","Error","disconnect","isConnected","connected","bulkLoad","getPrimaryService","service","getCharacteristic","bulkReadUUID","char","readValue","data","lightsOn","getUint8","command","readCommandData","buffer","slice","channelsData","i","endIndex","startIndex","readChannelData","channels","load","Promise","all","loadLightsOnData","loadCommandData","loadChannelData","value","console","log","uInt8Viewer","Uint8Array","uInt16Viewer","Uint16Array","primaryRed","primaryGreen","primaryBlue","secondaryRed","secondaryGreen","secondaryBlue","animation","stepDelay","stripUsed","stripType","stripOrder","stripPosition","numLEDs","channelIndex","updateCommand","primaryColor","secondaryColor","ArrayBuffer","delay","buffer8bit","red","green","blue","writeValue","updateChannel","position","order","used","save","characteristic","toggleLights","status","DeviceSelector","onDisconnected","props","stateUpdaters","updateDeviceState","message","includes","alert","state","deviceState","connectionStatus","selectedDevice","updateAllStates","toggleLightStatus","getCurrentStatusBorderStyle","borderColor","getCurrentStatusTextStyle","color","getCurrentStatusText","getLightsToggleButton","className","onClick","getSaveButton","Fragment","componentDidUpdate","style","this","name","Component","newColor","ColorList","handleNewColor","e","hex","toUpperCase","addColor","type","primaryColorState","updatePrimaryColorState","colorList","secondaryColorState","updateSecondaryColorState","addColorToList","isPickingColor","cancelColor","handleSelectColor","rgb","r","g","b","getColorPickerHeaderText","getColorList","toggleCustomColorPicker","presetColors","disableAlpha","width","onChangeComplete","getSelectedColor","selectedColor","getColorString","toString","length","colors","animations","AnimationList","switchAnimation","index","indexOf","target","updateCommandState","commandState","getSelectedAnimation","getDelayValue","updateDelayValue","parseInt","isNaN","onChange","map","key","ChannelSelector","channelState","editedChannelDescription","id","channelDescriptions","selectedChannelList","getIntFromPosition","updateChannelState","intPosition","splitPosition","split","channelClicked","currentSelectedChannelList","getDisabledStatus","channelNum","getToggleStyle","channel","getTogglePositionStyle","switchEditingChannel","updateChannelPosition","updateStripType","updateNumLEDs","updateColorOrder","addEditChannels","getNumLEDsValue","getSelectedChannel","getSelectedColorOrder","getSelectedStripType","showAddEditDescription","maxLength","disabled","DisplayBuilder","writeToDevice","err","App","setState","updates","getSelectedChannelList","getChannelDescriptions","descriptions","returnArray","getPositionFromInt","col","Math","floor","entry","showDisplayBuilder","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db65e7b8.chunk.js","sourcesContent":["var serviceUUIDs = require('./uuids');\r\n\r\nexport default class BlueToothCommands {\r\n    static encoder = new TextEncoder();\r\n    static decoder = new TextDecoder('utf-8');\r\n\r\n    static connect = async (disconnectListener) => {\r\n        let uuidArray = serviceUUIDs.channelUUIDs;\r\n        uuidArray.push(serviceUUIDs.saveUUID);\r\n        uuidArray.push(serviceUUIDs.onUUID);\r\n        uuidArray.push(serviceUUIDs.commandUUID);\r\n        uuidArray.push(serviceUUIDs.serviceUUID);\r\n        let options = {\r\n            acceptAllDevices: true,\r\n            optionalServices: uuidArray,\r\n            /*filters:[\r\n                {services: [serviceUUIDs.serviceUUID]}\r\n            ]*/\r\n        };\r\n        try{\r\n            let device = await navigator.bluetooth.requestDevice(options);\r\n            device.addEventListener('gattserverdisconnected', disconnectListener);\r\n            let server = await device.gatt.connect();\r\n            return server;\r\n        }catch(e){\r\n            throw new Error(\"Bluetooth Connection: \"+e);\r\n        }\r\n    }\r\n\r\n    static disconnect = (server) => {\r\n        if(this.isConnected(server)){\r\n            server.disconnect();\r\n        }\r\n    }\r\n\r\n    static isConnected = (server) => {\r\n        let connected = false;\r\n        if(server && server.connected){\r\n          connected = true;\r\n        }\r\n        return connected;\r\n    }\r\n\r\n    static bulkLoad = async (server) => {\r\n        if(!server.connected){\r\n            server = await server.connect();\r\n        }\r\n        let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n        let char = await service.getCharacteristic(serviceUUIDs.bulkReadUUID);\r\n        let data = await char.readValue();\r\n\r\n        let lightsOn = (data.getUint8(0) === 1) ? true : false;\r\n        let command = this.readCommandData(data.buffer.slice(2,12))\r\n\r\n        let channelsData = [];\r\n        for(let i=0; i< 8; i++){\r\n            let startIndex = 12+(6*i);\r\n            let endIndex = startIndex + 6;\r\n            channelsData.push(this.readChannelData(data.buffer.slice(startIndex, endIndex)));\r\n        }\r\n        \r\n        return {\r\n            lightsOn: lightsOn,\r\n            command: command,\r\n            channels: channelsData\r\n        }\r\n    }\r\n\r\n    static load = async (server) => {\r\n        if(!server.connected){\r\n            server = await server.connect();\r\n        }\r\n        let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n        let data = await Promise.all([\r\n            this.loadLightsOnData(service),\r\n            this.loadCommandData(service),\r\n            this.loadChannelData(service, 0),\r\n            this.loadChannelData(service, 1),\r\n            this.loadChannelData(service, 2),\r\n            this.loadChannelData(service, 3),\r\n            this.loadChannelData(service, 4),\r\n            this.loadChannelData(service, 5),\r\n            this.loadChannelData(service, 6),\r\n            this.loadChannelData(service, 7)\r\n        ]);\r\n        return {\r\n            lightsOn: data[0],\r\n            command: data[1],\r\n            channels: data.slice(2)\r\n        }\r\n    }\r\n\r\n    static loadLightsOnData = async (service) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.onUUID);\r\n            let value = await char.readValue();\r\n            return (value.getUint8(0) === 1) ? true : false;\r\n        }catch(error){\r\n            console.log(error);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    static readCommandData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            primaryRed: uInt8Viewer[0],\r\n            primaryGreen: uInt8Viewer[1],\r\n            primaryBlue: uInt8Viewer[2],\r\n            secondaryRed: uInt8Viewer[3],\r\n            secondaryGreen: uInt8Viewer[4],\r\n            secondaryBlue: uInt8Viewer[5],\r\n            animation: uInt8Viewer[6],\r\n            stepDelay: uInt16Viewer[4]\r\n        }\r\n    }\r\n\r\n    static loadCommandData = async (service) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.commandUUID);\r\n            let value = await char.readValue();\r\n            return this.readCommandData(value);\r\n        }catch(error){\r\n            console.log(\"Error reading commandData: \"+error);\r\n            return{\r\n                primaryRed: 0,\r\n                primaryGreen: 0,\r\n                primaryBlue: 0,\r\n                secondaryRed: 0,\r\n                secondaryGreen: 0,\r\n                secondaryBlue: 0,\r\n                animation: 0,\r\n                stepDelay: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    static readChannelData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            stripUsed: uInt8Viewer[0],\r\n            stripType: uInt8Viewer[1],\r\n            stripOrder: uInt8Viewer[2],\r\n            stripPosition: uInt8Viewer[3],\r\n            numLEDs: uInt16Viewer[2] //TODO: Verify if this is correct\r\n        }\r\n    }\r\n\r\n    static loadChannelData = async (service, channelIndex) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]);\r\n            let value = await char.readValue();\r\n            return this.readChannelData(value);\r\n        }catch(error){\r\n            console.log(\"Error reading channel \"+channelIndex+\" data: \"+error);\r\n            return {\r\n                stripUsed: 0,\r\n                stripType: 0,\r\n                stripOrder: 0,\r\n                stripPosition: 0,\r\n                numLEDs: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    static updateCommand = async (server, primaryColor, secondaryColor, command) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let char = await service.getCharacteristic(serviceUUIDs.commandUUID);\r\n    \r\n            let buffer = new ArrayBuffer(2); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            buffer16bit[0] = command.delay; //put value in as 16 bit value\r\n            let buffer8bit = new Uint8Array(buffer);\r\n    \r\n            let data = new Uint8Array([\r\n                primaryColor.red,\r\n                primaryColor.green,\r\n                primaryColor.blue,\r\n                secondaryColor.red,\r\n                secondaryColor.green,\r\n                secondaryColor.blue,\r\n                command.animation,\r\n                0, //unknown 0 here for some reason???\r\n                buffer8bit[0], //pull out as 2 8 bit values\r\n                buffer8bit[1]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending updateCommand ... command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static updateChannel = async (server, channelIndex, stripType, numLEDs, position, order, used) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let char = await service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]);\r\n    \r\n            let buffer = new ArrayBuffer(2); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            buffer16bit[0] = numLEDs; //put value in as 16 bit value\r\n            let buffer8bit = new Uint8Array(buffer);\r\n    \r\n            let data = new Uint8Array([\r\n                used,\r\n                stripType,\r\n                order,\r\n                position,\r\n                buffer8bit[0],\r\n                buffer8bit[1]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending updateChannel command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static save = async (server) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let characteristic = await service.getCharacteristic(serviceUUIDs.saveUUID);\r\n            let value = new Uint8Array([1]);//false is [0]\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending save command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static toggleLights = async (server, status) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let value = (status) ? new Uint8Array([0]) : new Uint8Array([1])\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let characteristic = await service.getCharacteristic(serviceUUIDs.onUUID);\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending toggleLights command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DeviceSelector.css';\r\n\r\n//this.props.selectedDevice\r\nclass DeviceSelector extends Component {\r\n\r\n  connect = async () => {\r\n    try{\r\n      let device = await BlueToothCommands.connect(this.onDisconnected);\r\n      this.props.stateUpdaters.updateDeviceState(device, 1, true);\r\n    }catch(e){\r\n      if(e.message.includes(\"User cancelled the requestDevice() chooser\") === false){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnect = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      BlueToothCommands.disconnect(this.props.state.deviceState.selectedDevice);\r\n    }\r\n  }\r\n\r\n  onDisconnected = () => {\r\n    this.props.stateUpdaters.updateDeviceState(null, 0, true);\r\n  }\r\n\r\n  load = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      let data = await BlueToothCommands.bulkLoad(this.props.state.deviceState.selectedDevice);\r\n      this.props.stateUpdaters.updateAllStates({server: this.props.state.deviceState.selectedDevice, data: data});\r\n    }\r\n  }\r\n\r\n  save = async () => {\r\n    if(this.props.state.selectedDevice){\r\n      BlueToothCommands.save(this.props.state.deviceState.selectedDevice);\r\n    }\r\n  }\r\n\r\n  toggleLightStatus = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n        let status = await BlueToothCommands.toggleLights(this.props.state.deviceState.selectedDevice, this.props.state.deviceState.lightsOn);\r\n        if(status){//success\r\n          this.props.stateUpdaters.updateDeviceState(\r\n            this.props.state.deviceState.selectedDevice,\r\n            this.props.state.deviceState.connectionStatus,\r\n            !this.props.state.deviceState.lightsOn\r\n          );\r\n        }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusBorderStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        borderColor: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        borderColor: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        borderColor: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusTextStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        color: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        color: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        color: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusText = () => {\r\n    let status = \"Status: \";\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      status += \"Disconnected\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      status += \"Loading saved data...\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      status += \"Connected\";\r\n    }\r\n    return status;\r\n  }\r\n\r\n  getLightsToggleButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      if(this.props.state.deviceState.lightsOn){\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights Off</button></div>\r\n      }else{\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights On</button></div>\r\n      }\r\n    }\r\n  }\r\n\r\n  getSaveButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      return <React.Fragment>\r\n        <button className=\"saveButton\" onClick={this.save}>Save CommandSet</button>\r\n      </React.Fragment>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"selectorMainDiv\" style = {this.getCurrentStatusBorderStyle()}>\r\n        <h2>Device Selector</h2>\r\n        <button className=\"selectorButton\" onClick={this.connect}>Connect Device</button>\r\n        <button className=\"selectorButton\" onClick={this.disconnect}>Disconnect Device</button>\r\n        <div className=\"selectorLabelDiv\">\r\n          <div>\r\n            <label className=\"selectorLabel\">Name: {(this.props.state.deviceState.selectedDevice) ? this.props.state.deviceState.selectedDevice.device.name : \"\"}</label>\r\n          </div>\r\n          <div>\r\n            <label className=\"selectorLabel\" style={this.getCurrentStatusTextStyle()}>{this.getCurrentStatusText()}</label>\r\n          </div>\r\n          <div>\r\n            {this.getSaveButton()}\r\n          </div>\r\n          {this.getLightsToggleButton()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      this.load();\r\n    }\r\n  }  \r\n}\r\nDeviceSelector.propTypes = {\r\n  state: PropTypes.object.isRequired\r\n}\r\n\r\nexport default DeviceSelector;\r\n","import React, { Component } from 'react'\r\nimport { SketchPicker } from 'react-color';\r\nimport { CirclePicker } from 'react-color';\r\nimport './../css/ColorList.css';\r\n\r\nvar newColor = null;\r\n\r\nclass ColorList extends Component {\r\n\r\n    handleNewColor = (color, e) => {\r\n        newColor = color.hex.toUpperCase();\r\n    }\r\n\r\n    addColor = (e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    addColorToList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    cancelColor = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    handleSelectColor = (color, e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }\r\n    }\r\n\r\n    getColorPickerHeaderText = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return \"Select Primary Color\";\r\n        }else{\r\n            return \"Select Secondary Color\";\r\n        }\r\n    }\r\n\r\n    getColorList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return this.props.state.primaryColorState.colorList;\r\n        }else{\r\n            return this.props.state.secondaryColorState.colorList;\r\n        }\r\n    }\r\n\r\n    toggleCustomColorPicker = () => {\r\n        let colorState = (this.props.type === \"primary\") ? this.props.state.primaryColorState : this.props.state.secondaryColorState\r\n        \r\n        if(colorState.isPickingColor){\r\n            return (\r\n                <div>\r\n                    <SketchPicker presetColors={[]} disableAlpha={true} width=\"250px\" onChangeComplete={this.handleNewColor}/>\r\n                    <button onClick={this.addColorToList}>Add</button>\r\n                    <button onClick={this.cancelColor}>Cancel</button>\r\n                </div>\r\n            )\r\n        }else{\r\n            return <button onClick={this.addColor} >Add Custom Color</button>\r\n        }\r\n    }\r\n\r\n    getSelectedColor = () => {\r\n        let selectedColor = null;\r\n        let colorList = null;\r\n        if(this.props.type === \"primary\"){\r\n            selectedColor = this.getColorString(\r\n                this.props.state.primaryColorState.red,\r\n                this.props.state.primaryColorState.green,\r\n                this.props.state.primaryColorState.blue\r\n            );\r\n            colorList = this.props.state.primaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.primaryColorState.red,\r\n                    g: this.props.state.primaryColorState.green,\r\n                    b: this.props.state.primaryColorState.blue\r\n                }});\r\n            }\r\n        }else{\r\n            selectedColor = this.getColorString(\r\n                this.props.state.secondaryColorState.red,\r\n                this.props.state.secondaryColorState.green,\r\n                this.props.state.secondaryColorState.blue\r\n            );\r\n            colorList = this.props.state.secondaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.secondaryColorState.red,\r\n                    g: this.props.state.secondaryColorState.green,\r\n                    b: this.props.state.secondaryColorState.blue\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    getColorString = (r, g, b) => {\r\n        let red = r.toString(16).toUpperCase();\r\n        let green = g.toString(16).toUpperCase();\r\n        let blue = b.toString(16).toUpperCase();\r\n        if(red.length === 1){\r\n            red = \"0\"+red;\r\n        }\r\n        if(green.length === 1){\r\n            green = \"0\"+green;\r\n        }\r\n        if(blue.length === 1){\r\n            blue = \"0\"+blue;\r\n        }\r\n        return \"#\"+red+green+blue;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"colorListMainDiv\">\r\n                <h3>{this.getColorPickerHeaderText()}</h3>\r\n                <div className=\"circlePickerDiv\">\r\n                    <CirclePicker colors={this.getColorList()} width=\"295px\" onChangeComplete={this.handleSelectColor} color={this.getSelectedColor()}/>\r\n                </div>\r\n                {this.toggleCustomColorPicker()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorList;","import React, { Component } from 'react'\r\nimport './../css/AnimationList.css';\r\n\r\nconst animations = [\r\n    \"Static\",\r\n    \"Blink\",\r\n    \"Pulse\",\r\n    \"Wave\",\r\n    \"Roll\",\r\n    \"Roll Alternate\",\r\n    \"Stack\",\r\n    \"Stack Alternate\"\r\n];\r\n\r\nexport class AnimationList extends Component {\r\n\r\n    switchAnimation = (e) => {\r\n        let index = animations.indexOf(e.target.value);\r\n        if(index > -1){\r\n            this.props.stateUpdaters.updateCommandState(index, this.props.state.commandState.delay);\r\n        }\r\n    }\r\n\r\n    getSelectedAnimation = () => {\r\n        return animations[this.props.state.commandState.animation];\r\n    }\r\n\r\n    getDelayValue = () => {\r\n        return this.props.state.commandState.delay;\r\n    }\r\n\r\n    updateDelayValue = (e) => {\r\n        let delay = parseInt(e.target.value);\r\n        if(isNaN(delay)){\r\n            delay = 0;\r\n        }\r\n        this.props.stateUpdaters.updateCommandState(this.props.state.commandState.animation, delay);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"animationListMainDiv\">\r\n                <h3>Select Animation</h3>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Animation: \r\n                        <select className=\"inRowDisplayInput\" onChange={this.switchAnimation} value={this.getSelectedAnimation()}>\r\n                            {animations.map(animation => <option key={animation} value={animation}> {animation} </option>)}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Delay:<input className=\"inRowDisplayInput indentText\" type=\"number\" type=\"text\" name=\"delay\" value={this.getDelayValue()} maxLength=\"4\" onChange={this.updateDelayValue}/></label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnimationList\r\n","import React, { Component } from 'react'\r\nimport './../css/ChannelSelector.css';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\n\r\nexport class ChannelSelector extends Component {\r\n\r\n    updateChannel = async (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = (this.props.state.channelState.editedChannelDescription.numLEDs !== null) ? this.props.state.channelState.editedChannelDescription.numLEDs : this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            let type = (this.props.state.channelState.editedChannelDescription.type !== null) ? this.props.state.channelState.editedChannelDescription.type : this.props.state.channelState.channelDescriptions[id].type\r\n            let order = (this.props.state.channelState.editedChannelDescription.order !== null) ? this.props.state.channelState.editedChannelDescription.order : this.props.state.channelState.channelDescriptions[id].order\r\n            let position = (this.props.state.channelState.editedChannelDescription.position !== null) ? this.props.state.channelState.editedChannelDescription.position : this.props.state.channelState.channelDescriptions[id].position\r\n            let used = this.props.state.channelState.selectedChannelList[id];\r\n            let status = await BlueToothCommands.updateChannel(\r\n                this.props.state.deviceState.selectedDevice,\r\n                id,\r\n                type,\r\n                numLEDs,\r\n                this.getIntFromPosition(position),\r\n                order,\r\n                used\r\n            );\r\n\r\n            if(status){\r\n                let channelDescriptions = this.props.state.channelState.channelDescriptions;\r\n                channelDescriptions[id].numLEDs = numLEDs;\r\n                channelDescriptions[id].type = type;\r\n                channelDescriptions[id].order = order;\r\n                channelDescriptions[id].position = position;\r\n                this.props.stateUpdaters.updateChannelState(\r\n                    this.props.state.channelState.selectedChannelList,\r\n                    channelDescriptions,\r\n                    {   \r\n                        id: id,\r\n                        type: null,\r\n                        numLEDs: null,\r\n                        position: null,\r\n                        order: null\r\n                    }\r\n                );\r\n            }\r\n        }else{\r\n            //there is nothing to update\r\n        }\r\n    }\r\n\r\n    getIntFromPosition = (position) => {\r\n        let intPosition = 0;\r\n        let splitPosition = position.split(\":\");\r\n        intPosition = parseInt(splitPosition[0]) * 4\r\n        intPosition += parseInt(splitPosition[1]);\r\n        return intPosition;\r\n    }\r\n\r\n    channelClicked = (e) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        currentSelectedChannelList[e.target.value] = (currentSelectedChannelList[e.target.value] === true) ? false : true\r\n        this.props.stateUpdaters.updateChannelState(\r\n            currentSelectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            this.props.state.channelState.editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getDisabledStatus = (channelNum) => {\r\n        if(this.props.state.channelState.channelDescriptions !== null){\r\n            if(this.props.state.channelState.channelDescriptions[channelNum].stripType === 0){\r\n                return true;\r\n            }else if(this.props.state.channelState.channelDescriptions[channelNum].stripType === null){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getToggleStyle = (channel) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        let channelFound = currentSelectedChannelList[channel];\r\n        if(channelFound){\r\n            return \"channelButtonSelected\"\r\n        }else{\r\n            return \"channelButton\"\r\n        }\r\n    }\r\n\r\n    getTogglePositionStyle = (value) => {\r\n        if(this.props.state.channelState.editedChannelDescription != null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let position = this.props.state.channelState.editedChannelDescription.position;\r\n            if(position !== null){\r\n                if(value === position){\r\n                    return \"channelPositionSelectedUsed\";\r\n                }else{\r\n                    return \"channelPosition\";\r\n                }\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && value === this.props.state.channelState.channelDescriptions[id].position){\r\n                return \"channelPositionSelectedUsed\";\r\n            }else{\r\n                return \"channelPosition\";\r\n            }\r\n        }else{\r\n           return \"channelPosition\";\r\n        }\r\n    }\r\n\r\n    switchEditingChannel = (e) => {\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            {\r\n                id: parseInt(e.target.value),\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null\r\n            }\r\n        );\r\n    }\r\n\r\n    updateChannelPosition = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.position = e.target.value;\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateStripType = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.type = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateNumLEDs = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.numLEDs = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateColorOrder = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.order = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    addEditChannels = () => {\r\n        let editedChannelDescription = null;\r\n        if(this.props.state.channelState.editedChannelDescription === null){\r\n            editedChannelDescription = {\r\n                id: 0,\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null\r\n            }\r\n        }\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getNumLEDsValue = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = this.props.state.channelState.editedChannelDescription.numLEDs;\r\n            if(numLEDs !== null){\r\n                return numLEDs\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].numLEDs !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedChannel = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return this.props.state.channelState.editedChannelDescription.id;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedColorOrder = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let order = this.props.state.channelState.editedChannelDescription.order;\r\n            if(order !== null){\r\n                return order\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].order !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].order\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedStripType = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let type = this.props.state.channelState.editedChannelDescription.type;\r\n            if(type !== null){\r\n                return type\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].type !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].type\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    showAddEditDescription = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return <React.Fragment>\r\n                <div className=\"channelAddEditDiv\">\r\n                    <div>\r\n                        <label>Channel:\r\n                            <select className=\"channelInput\" onChange={this.switchEditingChannel} value={this.getSelectedChannel()}>\r\n                                <option value={0}>0</option>\r\n                                <option value={1}>1</option>\r\n                                <option value={2}>2</option>\r\n                                <option value={3}>3</option>\r\n                                <option value={4}>4</option>\r\n                                <option value={5}>5</option>\r\n                                <option value={6}>6</option>\r\n                                <option value={7}>7</option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <label>LED Count:<input className=\"channelInput\" type=\"text\" name=\"numLEDs\" value={this.getNumLEDsValue()} maxLength=\"3\" onChange={this.updateNumLEDs}/></label>\r\n                    </div>\r\n                    <div>\r\n                        <label>Color Order:\r\n                            <select className=\"channelInput\" value={this.getSelectedColorOrder()} onChange={this.updateColorOrder}>\r\n                                <option value={0}>RGB</option>\r\n                                <option value={1}>RBG</option>\r\n                                <option value={2}>BRG</option>\r\n                                <option value={3}>BGR</option>\r\n                                <option value={4}>GBR</option>\r\n                                <option value={5}>GRB</option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <label>Strip Type:\r\n                            <select className=\"channelInput\" value={this.getSelectedStripType()} onChange={this.updateStripType}>\r\n                                <option value={0}>NONE</option>\r\n                                <option value={1}>NEO KHZ800 (WS2812)</option>\r\n                                <option value={2}>NEO KHZ400 (WS2811)</option>\r\n                            </select>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"channelPositionDiv\" >\r\n                        <label>Strip Position:\r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"0:0\")} type=\"button\" value=\"0:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:1\")} type=\"button\" value=\"0:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:2\")} type=\"button\" value=\"0:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"1:0\")} type=\"button\" value=\"1:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:1\")} type=\"button\" value=\"1:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:2\")} type=\"button\" value=\"1:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"2:0\")} type=\"button\" value=\"2:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:1\")} type=\"button\" value=\"2:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:2\")} type=\"button\" value=\"2:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"3:0\")} type=\"button\" value=\"3:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:1\")} type=\"button\" value=\"3:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:2\")} type=\"button\" value=\"3:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <input className=\"channelButton channelInput\" type=\"button\" value=\"Update Channel\" onClick={this.updateChannel}/>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"channelSelectorMainDiv\">\r\n                <h3>Select Channels</h3>\r\n                <div className=\"channelsDiv\">\r\n                    <input className=\"channelButton channelInput\" type=\"button\" name=\"addEditChannels\" value=\"Add/Edit Channels\" onClick={this.addEditChannels}/>\r\n                    {this.showAddEditDescription()}\r\n                    <div>\r\n                        <input disabled={this.getDisabledStatus(0)} className={this.getToggleStyle(0)} type=\"button\" name=\"channel0\" value={0} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(1)} className={this.getToggleStyle(1)} type=\"button\" name=\"channel1\" value={1} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(2)} className={this.getToggleStyle(2)} type=\"button\" name=\"channel2\" value={2} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(3)} className={this.getToggleStyle(3)} type=\"button\" name=\"channel3\" value={3} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(4)} className={this.getToggleStyle(4)} type=\"button\" name=\"channel4\" value={4} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(5)} className={this.getToggleStyle(5)} type=\"button\" name=\"channel5\" value={5} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(6)} className={this.getToggleStyle(6)} type=\"button\" name=\"channel6\" value={6} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(7)} className={this.getToggleStyle(7)} type=\"button\" name=\"channel7\" value={7} onClick={this.channelClicked}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChannelSelector\r\n","import React, { Component } from 'react';\r\nimport ColorList from './ColorList';\r\nimport AnimationList from './AnimationList';\r\nimport ChannelSelector from './ChannelSelector';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DisplayBuilder.css';\r\n\r\nexport class DisplayBuilder extends Component {\r\n\r\n    writeToDevice = async (e) => {\r\n        try{\r\n            BlueToothCommands.updateCommand(\r\n                this.props.state.deviceState.selectedDevice,\r\n                this.props.state.primaryColorState,\r\n                this.props.state.secondaryColorState,\r\n                this.props.state.commandState\r\n            );\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"displayBuilderMainDiv\">\r\n                <h2>Display Builder</h2>\r\n                <ChannelSelector state={this.props.state} stateUpdaters={this.props.stateUpdaters} />\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"primary\"/>\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"secondary\"/>\r\n                <AnimationList state={this.props.state} stateUpdaters={this.props.stateUpdaters}/>\r\n                <div>\r\n                    <input className=\"displayBuilderButton\" type=\"button\" value=\"Write To Device\" onClick={this.writeToDevice}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayBuilder","import React from 'react';\nimport DeviceSelector from './components/DeviceSelector';\nimport DisplayBuilder from './components/DisplayBuilder';\n\nimport './css/App.css';\n\nclass App extends React.Component {\n\n  state = {\n    deviceState: {\n      selectedDevice: null,\n      connectionStatus: 0, //0 is disconnected, 1 is connecting, 2 is connected\n      lightsOn: true\n    },\n    channelState: {\n      selectedChannelList: [false, false, false, false, false, false, false, false],\n      channelDescriptions: null,\n      editedChannelDescription: null\n    },\n    primaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    secondaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    commandState: {\n      animation: 0,\n      delay: 0,\n    }\n  }\n\n  updateDeviceState = (selectedDevice, connectionStatus, lightsOn) =>{\n    let state = {\n      selectedDevice: selectedDevice,\n      connectionStatus: connectionStatus,\n      lightsOn: lightsOn\n    }\n    this.setState({deviceState: state});\n  }\n\n  updateChannelState = (selectedChannelList, channelDescriptions, editedChannelDescription) => {\n    let state = {\n      selectedChannelList: selectedChannelList,\n      channelDescriptions: channelDescriptions,\n      editedChannelDescription: editedChannelDescription\n    }\n    this.setState({channelState: state});\n  }\n\n  updatePrimaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({primaryColorState: state});\n  }\n\n  updateSecondaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({secondaryColorState: state});\n  }\n\n  updateCommandState = (animation, delay) => {\n    let state = {\n      animation: animation,\n      delay: delay\n    }\n    this.setState({commandState: state});\n  }\n\n  updateAllStates = (updates) => {\n    try{\n      let deviceState = {\n        selectedDevice: updates.server,\n        connectionStatus: 2, //connected\n        lightsOn: updates.data.lightsOn\n      }\n\n      let primaryColorState = {\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.primaryRed,\n        green: updates.data.command.primaryGreen,\n        blue: updates.data.command.primaryBlue\n      }\n\n      let secondaryColorState = { //currently matches primary, need to add full secondary color functionality\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.secondaryRed,\n        green: updates.data.command.secondaryGreen,\n        blue: updates.data.command.secondaryBlue\n      }\n\n      let commandState = {\n        animation: updates.data.command.animation,\n        delay: updates.data.command.stepDelay\n      }\n\n      let channelState = {\n        selectedChannelList: this.getSelectedChannelList(updates.data.channels),\n        channelDescriptions: this.getChannelDescriptions(updates.data.channels),\n        editedChannelDescription: null\n      }\n\n      this.setState({\n        deviceState: deviceState,\n        channelState: channelState,\n        primaryColorState: primaryColorState,\n        secondaryColorState: secondaryColorState,\n        commandState: commandState\n      });\n    }catch(e){\n      alert(e);\n    }\n  }\n\n  getSelectedChannelList = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      if(descriptions != null && descriptions[i] != null){\n        if(descriptions[i].stripUsed === 1){\n          returnArray.push(true);\n        }else{\n          returnArray.push(false);\n        }\n      }else{\n        returnArray.push(false);\n      }\n    }\n    return returnArray;\n  }\n\n  getPositionFromInt = (intPosition) => {\n    let numCols = 3;\n    let row = Math.floor(intPosition / numCols);\n    let col = intPosition % numCols;\n    return row.toString() +\":\"+col.toString()\n  }\n\n  getChannelDescriptions = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      let entry = null;\n      if(descriptions != null && descriptions[i] != null){\n        entry = {\n          id: i,\n          type: descriptions[i].stripType,\n          numLEDs: descriptions[i].numLEDs,\n          position: this.getPositionFromInt(descriptions[i].stripPosition),\n          order: descriptions[i].stripOrder,\n          used: descriptions[i].stripUsed\n        }\n      }else{\n        entry = {\n          id: i,\n          type: null,\n          numLEDs: null,\n          position: null,\n          order: null,\n          used: false\n        }\n      }\n      returnArray.push(entry);\n    }\n    return returnArray;\n  }\n\n  stateUpdaters = {\n    updateDeviceState: this.updateDeviceState,\n    updateChannelState: this.updateChannelState,\n    updatePrimaryColorState: this.updatePrimaryColorState,\n    updateSecondaryColorState: this.updateSecondaryColorState,\n    updateCommandState: this.updateCommandState,\n    updateAllStates: this.updateAllStates\n  }\n\n  showDisplayBuilder = () =>{\n    if(this.state.deviceState.connectionStatus === 2){ //should check for 2 (connected), using null while in development\n      return (\n        <React.Fragment>\n          <DisplayBuilder state={this.state} stateUpdaters={this.stateUpdaters}/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <DeviceSelector stateUpdaters={this.stateUpdaters} state={this.state} />\n        {this.showDisplayBuilder()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}