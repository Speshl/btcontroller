{"version":3,"sources":["shared/BlueToothCommands.js","components/DeviceSelector.js","components/ColorList.js","components/AnimationList.js","components/ChannelSelector.js","components/DisplayBuilder.js","App.js","serviceWorker.js","index.js"],"names":["serviceUUIDs","require","BlueToothCommands","encoder","TextEncoder","decoder","TextDecoder","connect","disconnectListener","a","uuidArray","channelUUIDs","push","saveUUID","onUUID","commandUUID","serviceUUID","options","acceptAllDevices","optionalServices","navigator","bluetooth","requestDevice","device","addEventListener","gatt","server","Error","disconnect","isConnected","connected","bulkLoad","getPrimaryService","service","getCharacteristic","bulkReadUUID","char","readValue","data","lightsOn","getUint8","interiorLightsOn","command","readCommandData","buffer","slice","channelsData","i","endIndex","startIndex","readChannelData","channels","load","Promise","all","loadLightsOnData","loadCommandData","loadChannelData","value","console","log","uInt8Viewer","Uint8Array","uInt16Viewer","Uint16Array","primaryRed","primaryGreen","primaryBlue","secondaryRed","secondaryGreen","secondaryBlue","animation","stepDelay","isCentered","isInterior","stripUsed","directionFlipped","stripType","stripOrder","stripPosition","numLEDs","height","width","channelIndex","updateCommand","primaryColor","secondaryColor","ArrayBuffer","delay","buffer8bit","red","green","blue","writeValue","updateChannel","position","order","used","buffer16bit","save","characteristic","toggleLights","status","toggleInteriorLights","interiorOnUUID","DeviceSelector","onDisconnected","props","stateUpdaters","updateDeviceState","message","includes","alert","state","deviceState","connectionStatus","selectedDevice","updateAllStates","toggleLightStatus","toggleInteriorLightStatus","getCurrentStatusBorderStyle","borderColor","getCurrentStatusTextStyle","color","getCurrentStatusText","getInteriorLightsToggleButton","className","onClick","getLightsToggleButton","getSaveButton","Fragment","componentDidUpdate","style","this","name","Component","newColor","ColorList","handleNewColor","e","hex","toUpperCase","addColor","type","primaryColorState","updatePrimaryColorState","colorList","secondaryColorState","updateSecondaryColorState","addColorToList","isPickingColor","cancelColor","handleSelectColor","rgb","r","g","b","getColorPickerHeaderText","getColorList","toggleCustomColorPicker","presetColors","disableAlpha","onChangeComplete","getSelectedColor","selectedColor","getColorString","toString","length","colors","animations","AnimationList","switchAnimation","index","indexOf","target","updateCommandState","commandState","getSelectedAnimation","getDelayValue","updateDelayValue","parseInt","isNaN","onChange","map","key","min","ChannelSelector","channelState","editedChannelDescription","channelDescriptions","id","selectedChannelList","getIntFromPosition","updateChannelState","intPosition","splitPosition","split","channelClicked","currentSelectedChannelList","getDisabledStatus","channelNum","getToggleStyle","channel","getTogglePositionStyle","switchEditingChannel","updateChannelPosition","updateStripType","updateInterior","checked","updateCentered","updateNumLEDs","updateHeight","updateWidth","updateColorOrder","addEditChannels","getNumLEDsValue","getHeight","getWidth","getSelectedChannel","getSelectedColorOrder","getSelectedStripType","getInteriorCheckedState","interiorValue","getCenteredCheckedState","showAddEditDescription","maxLength","disabled","DisplayBuilder","writeToDevice","err","App","setState","updates","getSelectedChannelList","getChannelDescriptions","descriptions","returnArray","getPositionFromInt","col","Math","floor","entry","showDisplayBuilder","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ae4cb72.chunk.js","sourcesContent":["var serviceUUIDs = require('./uuids');\r\n\r\nexport default class BlueToothCommands {\r\n    static encoder = new TextEncoder();\r\n    static decoder = new TextDecoder('utf-8');\r\n\r\n    static connect = async (disconnectListener) => {\r\n        let uuidArray = serviceUUIDs.channelUUIDs;\r\n        uuidArray.push(serviceUUIDs.saveUUID);\r\n        uuidArray.push(serviceUUIDs.onUUID);\r\n        uuidArray.push(serviceUUIDs.commandUUID);\r\n        uuidArray.push(serviceUUIDs.serviceUUID);\r\n        let options = {\r\n            acceptAllDevices: true,\r\n            optionalServices: uuidArray,\r\n            /*filters:[\r\n                {services: [serviceUUIDs.serviceUUID]}\r\n            ]*/\r\n        };\r\n        try{\r\n            let device = await navigator.bluetooth.requestDevice(options);\r\n            device.addEventListener('gattserverdisconnected', disconnectListener);\r\n            let server = await device.gatt.connect();\r\n            return server;\r\n        }catch(e){\r\n            throw new Error(\"Bluetooth Connection: \"+e);\r\n        }\r\n    }\r\n\r\n    static disconnect = (server) => {\r\n        if(this.isConnected(server)){\r\n            server.disconnect();\r\n        }\r\n    }\r\n\r\n    static isConnected = (server) => {\r\n        let connected = false;\r\n        if(server && server.connected){\r\n          connected = true;\r\n        }\r\n        return connected;\r\n    }\r\n\r\n    static bulkLoad = async (server) => {\r\n        if(!server.connected){\r\n            server = await server.connect();\r\n        }\r\n        let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n        let char = await service.getCharacteristic(serviceUUIDs.bulkReadUUID);\r\n        let data = await char.readValue();\r\n\r\n        let lightsOn = (data.getUint8(0) === 1) ? true : false;\r\n        let interiorLightsOn = (data.getUint8(1) === 1) ? true : false;\r\n        let command = this.readCommandData(data.buffer.slice(2,12))\r\n\r\n        let channelsData = [];\r\n        for(let i=0; i< 8; i++){\r\n            let startIndex = 12+(14*i);\r\n            let endIndex = startIndex + 14;\r\n            channelsData.push(this.readChannelData(data.buffer.slice(startIndex, endIndex)));\r\n        }\r\n        \r\n        return {\r\n            lightsOn: lightsOn,\r\n            interiorLightsOn: interiorLightsOn,\r\n            command: command,\r\n            channels: channelsData\r\n        }\r\n    }\r\n\r\n    static load = async (server) => {\r\n        if(!server.connected){\r\n            server = await server.connect();\r\n        }\r\n        let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n        let data = await Promise.all([\r\n            this.loadLightsOnData(service),\r\n            this.loadCommandData(service),\r\n            this.loadChannelData(service, 0),\r\n            this.loadChannelData(service, 1),\r\n            this.loadChannelData(service, 2),\r\n            this.loadChannelData(service, 3),\r\n            this.loadChannelData(service, 4),\r\n            this.loadChannelData(service, 5),\r\n            this.loadChannelData(service, 6),\r\n            this.loadChannelData(service, 7)\r\n        ]);\r\n        return {\r\n            lightsOn: data[0],\r\n            command: data[1],\r\n            channels: data.slice(2)\r\n        }\r\n    }\r\n\r\n    static loadLightsOnData = async (service) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.onUUID);\r\n            let value = await char.readValue();\r\n            return (value.getUint8(0) === 1) ? true : false;\r\n        }catch(error){\r\n            console.log(error);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    static readCommandData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            primaryRed: uInt8Viewer[0],\r\n            primaryGreen: uInt8Viewer[1],\r\n            primaryBlue: uInt8Viewer[2],\r\n            secondaryRed: uInt8Viewer[3],\r\n            secondaryGreen: uInt8Viewer[4],\r\n            secondaryBlue: uInt8Viewer[5],\r\n            animation: uInt8Viewer[6],\r\n            stepDelay: uInt16Viewer[4]\r\n        }\r\n    }\r\n\r\n    static loadCommandData = async (service) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.commandUUID);\r\n            let value = await char.readValue();\r\n            return this.readCommandData(value);\r\n        }catch(error){\r\n            console.log(\"Error reading commandData: \"+error);\r\n            return{\r\n                primaryRed: 0,\r\n                primaryGreen: 0,\r\n                primaryBlue: 0,\r\n                secondaryRed: 0,\r\n                secondaryGreen: 0,\r\n                secondaryBlue: 0,\r\n                animation: 0,\r\n                stepDelay: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    static readChannelData = (value) => {\r\n        let uInt8Viewer = new Uint8Array(value);\r\n        let uInt16Viewer = new Uint16Array(value);\r\n        return {\r\n            isCentered: uInt8Viewer[0],\r\n            isInterior: uInt8Viewer[1],\r\n            stripUsed: uInt8Viewer[2],\r\n            directionFlipped: uInt8Viewer[3],\r\n            stripType: uInt8Viewer[4],\r\n            stripOrder: uInt8Viewer[5],\r\n            stripPosition: uInt8Viewer[6],\r\n            numLEDs: uInt16Viewer[4], //TODO: Verify if this is correct\r\n            height: uInt16Viewer[5],\r\n            width: uInt16Viewer[6]\r\n        }\r\n    }\r\n\r\n    static loadChannelData = async (service, channelIndex) => {\r\n        try{\r\n            let char = await service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]);\r\n            let value = await char.readValue();\r\n            return this.readChannelData(value);\r\n        }catch(error){\r\n            console.log(\"Error reading channel \"+channelIndex+\" data: \"+error);\r\n            return {\r\n                isCentered: 0,\r\n                isInterior: 0,\r\n                stripUsed: 0,\r\n                directionFlipped: 0,\r\n                stripType: 0,\r\n                stripOrder: 0,\r\n                stripPosition: 0,\r\n                numLEDs: 0,\r\n                height: 0,\r\n                width: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    static updateCommand = async (server, primaryColor, secondaryColor, command) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let char = await service.getCharacteristic(serviceUUIDs.commandUUID);\r\n    \r\n            let buffer = new ArrayBuffer(2); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            buffer16bit[0] = command.delay; //put value in as 16 bit value\r\n            let buffer8bit = new Uint8Array(buffer);\r\n    \r\n            let data = new Uint8Array([\r\n                primaryColor.red,\r\n                primaryColor.green,\r\n                primaryColor.blue,\r\n                secondaryColor.red,\r\n                secondaryColor.green,\r\n                secondaryColor.blue,\r\n                command.animation,\r\n                0, //unknown 0 here for some reason???\r\n                buffer8bit[0], //pull out as 2 8 bit values\r\n                buffer8bit[1]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending updateCommand ... command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static updateChannel = async (server, channelIndex, stripType, numLEDs, position, order, used, isInterior, isCentered, height, width) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let char = await service.getCharacteristic(serviceUUIDs.channelUUIDs[channelIndex]);\r\n    \r\n            let buffer = new ArrayBuffer(6); //underlying buffer for both views\r\n            let buffer16bit = new Uint16Array(buffer);\r\n            let buffer8bit = new Uint8Array(buffer);\r\n            buffer16bit[0] = numLEDs; //put value in as 16 bit value\r\n            buffer16bit[1] = height;\r\n            buffer16bit[2] = width;\r\n    \r\n            let data = new Uint8Array([\r\n                isCentered,\r\n                isInterior,\r\n                used,\r\n                stripType,\r\n                order,\r\n                position,\r\n                buffer8bit[0],\r\n                buffer8bit[1],\r\n                buffer8bit[2],\r\n                buffer8bit[3],\r\n                buffer8bit[4],\r\n                buffer8bit[5]\r\n            ]);\r\n            char.writeValue(data);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending updateChannel command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static save = async (server) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let characteristic = await service.getCharacteristic(serviceUUIDs.saveUUID);\r\n            let value = new Uint8Array([1]);//false is [0]\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending save command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static toggleLights = async (server, status) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let value = (status) ? new Uint8Array([0]) : new Uint8Array([1])\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let characteristic = await service.getCharacteristic(serviceUUIDs.onUUID);\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending toggleLights command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static toggleInteriorLights = async (server, status) => {\r\n        try{\r\n            if(!server.connected){\r\n                server = await server.connect();\r\n            }\r\n            let value = (status) ? new Uint8Array([0]) : new Uint8Array([1])\r\n            let service = await server.getPrimaryService(serviceUUIDs.serviceUUID);\r\n            let characteristic = await service.getCharacteristic(serviceUUIDs.interiorOnUUID);\r\n            characteristic.writeValue(value);\r\n            return true;\r\n        }catch(error){\r\n            console.log(\"Error sending toggleInteriorLights command: \"+error);\r\n            return false;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DeviceSelector.css';\r\n\r\nclass DeviceSelector extends Component {\r\n\r\n  connect = async () => {\r\n    try{\r\n      let device = await BlueToothCommands.connect(this.onDisconnected);\r\n      this.props.stateUpdaters.updateDeviceState(device, 1, true);\r\n    }catch(e){\r\n      if(e.message.includes(\"User cancelled the requestDevice() chooser\") === false){\r\n        alert(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnect = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      BlueToothCommands.disconnect(this.props.state.deviceState.selectedDevice);\r\n    }\r\n  }\r\n\r\n  onDisconnected = () => {\r\n    this.props.stateUpdaters.updateDeviceState(null, 0, true);\r\n  }\r\n\r\n  load = async () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      let data = await BlueToothCommands.bulkLoad(this.props.state.deviceState.selectedDevice);\r\n      this.props.stateUpdaters.updateAllStates({server: this.props.state.deviceState.selectedDevice, data: data});\r\n    }\r\n  }\r\n\r\n  save = async () => {\r\n    if(this.props.state.deviceState.selectedDevice){\r\n      BlueToothCommands.save(this.props.state.deviceState.selectedDevice);\r\n    }\r\n  }\r\n\r\n  toggleLightStatus = async () => {\r\n    console.log(\"toggling lights\")\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n        let status = await BlueToothCommands.toggleLights(this.props.state.deviceState.selectedDevice, this.props.state.deviceState.lightsOn);\r\n        if(status){//success\r\n          this.props.stateUpdaters.updateDeviceState(\r\n            this.props.state.deviceState.selectedDevice,\r\n            this.props.state.deviceState.connectionStatus,\r\n            !this.props.state.deviceState.lightsOn,\r\n            this.props.state.deviceState.interiorLightsOn\r\n          );\r\n        }\r\n    }\r\n  }\r\n\r\n  toggleInteriorLightStatus = async () => {\r\n    console.log(\"Toggling interior lights\")\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      console.log(this.props.state.deviceState.interiorLightsOn)\r\n        let status = await BlueToothCommands.toggleInteriorLights(this.props.state.deviceState.selectedDevice, this.props.state.deviceState.interiorLightsOn);\r\n        if(status){//success\r\n          this.props.stateUpdaters.updateDeviceState(\r\n            this.props.state.deviceState.selectedDevice,\r\n            this.props.state.deviceState.connectionStatus,\r\n            this.props.state.deviceState.lightsOn,\r\n            !this.props.state.deviceState.interiorLightsOn\r\n          );\r\n        }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusBorderStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        borderColor: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        borderColor: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        borderColor: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusTextStyle = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      return{\r\n        color: \"red\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      return{\r\n        color: \"yellow\"\r\n      }\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      return{\r\n        color: \"green\"\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentStatusText = () => {\r\n    let status = \"Status: \";\r\n    if(this.props.state.deviceState.connectionStatus === 0){\r\n      status += \"Disconnected\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 1){\r\n      status += \"Loading saved data...\";\r\n    }else if(this.props.state.deviceState.connectionStatus === 2){\r\n      status += \"Connected\";\r\n    }\r\n    return status;\r\n  }\r\n\r\n  getInteriorLightsToggleButton = () => {\r\n    console.log(\"Interior Toggle Button\")\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      console.log(this.props.state.deviceState.interiorLightsOn)\r\n      if(this.props.state.deviceState.interiorLightsOn){\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleInteriorLightStatus}>Toggle Interior Lights Off</button></div>\r\n      }else{\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleInteriorLightStatus}>Toggle Interior Lights On</button></div>\r\n      }\r\n    }\r\n  }\r\n\r\n  getLightsToggleButton = () => {\r\n    console.log(\"Lights Toggle Button\")\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      if(this.props.state.deviceState.lightsOn){\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights Off</button></div>\r\n      }else{\r\n        return <div><button className=\"lightsToggle\" onClick={this.toggleLightStatus}>Toggle Lights On</button></div>\r\n      }\r\n    }\r\n  }\r\n\r\n  getSaveButton = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 2){\r\n      return <React.Fragment>\r\n        <button className=\"saveButton\" onClick={this.save}>Save CommandSet</button>\r\n      </React.Fragment>\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"selectorMainDiv\" style = {this.getCurrentStatusBorderStyle()}>\r\n        <h2>Device Selector</h2>\r\n        <button className=\"selectorButton\" onClick={this.connect}>Connect Device</button>\r\n        <button className=\"selectorButton\" onClick={this.disconnect}>Disconnect Device</button>\r\n        <div className=\"selectorLabelDiv\">\r\n          <div>\r\n            <label className=\"selectorLabel\">Name: {(this.props.state.deviceState.selectedDevice) ? this.props.state.deviceState.selectedDevice.device.name : \"\"}</label>\r\n          </div>\r\n          <div>\r\n            <label className=\"selectorLabel\" style={this.getCurrentStatusTextStyle()}>{this.getCurrentStatusText()}</label>\r\n          </div>\r\n          <div>\r\n            {this.getSaveButton()}\r\n          </div>\r\n          {this.getLightsToggleButton()}\r\n          {this.getInteriorLightsToggleButton()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    if(this.props.state.deviceState.connectionStatus === 1){\r\n      this.load();\r\n    }\r\n  }  \r\n}\r\nDeviceSelector.propTypes = {\r\n  state: PropTypes.object.isRequired\r\n}\r\n\r\nexport default DeviceSelector;\r\n","import React, { Component } from 'react'\r\nimport { SketchPicker } from 'react-color';\r\nimport { CirclePicker } from 'react-color';\r\nimport './../css/ColorList.css';\r\n\r\nvar newColor = null;\r\n\r\nclass ColorList extends Component {\r\n\r\n    handleNewColor = (color, e) => {\r\n        newColor = color.hex.toUpperCase();\r\n    }\r\n\r\n    addColor = (e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                true,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    addColorToList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            state.colorList.push(newColor);\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    cancelColor = () => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                false,\r\n                state.red,\r\n                state.green,\r\n                state.blue\r\n            );\r\n        }\r\n    }\r\n\r\n    handleSelectColor = (color, e) => {\r\n        if(this.props.type === \"primary\"){\r\n            let state = this.props.state.primaryColorState;\r\n            this.props.stateUpdaters.updatePrimaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }else{\r\n            let state = this.props.state.secondaryColorState;\r\n            this.props.stateUpdaters.updateSecondaryColorState(\r\n                state.colorList,\r\n                state.isPickingColor,\r\n                color.rgb.r,\r\n                color.rgb.g,\r\n                color.rgb.b\r\n            );\r\n        }\r\n    }\r\n\r\n    getColorPickerHeaderText = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return \"Select Primary Color\";\r\n        }else{\r\n            return \"Select Secondary Color\";\r\n        }\r\n    }\r\n\r\n    getColorList = () => {\r\n        if(this.props.type === \"primary\"){\r\n            return this.props.state.primaryColorState.colorList;\r\n        }else{\r\n            return this.props.state.secondaryColorState.colorList;\r\n        }\r\n    }\r\n\r\n    toggleCustomColorPicker = () => {\r\n        let colorState = (this.props.type === \"primary\") ? this.props.state.primaryColorState : this.props.state.secondaryColorState\r\n        \r\n        if(colorState.isPickingColor){\r\n            return (\r\n                <div>\r\n                    <SketchPicker presetColors={[]} disableAlpha={true} width=\"250px\" onChangeComplete={this.handleNewColor}/>\r\n                    <button onClick={this.addColorToList}>Add</button>\r\n                    <button onClick={this.cancelColor}>Cancel</button>\r\n                </div>\r\n            )\r\n        }else{\r\n            return <button onClick={this.addColor} >Add Custom Color</button>\r\n        }\r\n    }\r\n\r\n    getSelectedColor = () => {\r\n        let selectedColor = null;\r\n        let colorList = null;\r\n        if(this.props.type === \"primary\"){\r\n            selectedColor = this.getColorString(\r\n                this.props.state.primaryColorState.red,\r\n                this.props.state.primaryColorState.green,\r\n                this.props.state.primaryColorState.blue\r\n            );\r\n            colorList = this.props.state.primaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.primaryColorState.red,\r\n                    g: this.props.state.primaryColorState.green,\r\n                    b: this.props.state.primaryColorState.blue\r\n                }});\r\n            }\r\n        }else{\r\n            selectedColor = this.getColorString(\r\n                this.props.state.secondaryColorState.red,\r\n                this.props.state.secondaryColorState.green,\r\n                this.props.state.secondaryColorState.blue\r\n            );\r\n            colorList = this.props.state.secondaryColorState.colorList;\r\n            if(colorList.includes(selectedColor)){\r\n                return selectedColor;\r\n            }else{\r\n                this.addColorToList({rgb:{\r\n                    r: this.props.state.secondaryColorState.red,\r\n                    g: this.props.state.secondaryColorState.green,\r\n                    b: this.props.state.secondaryColorState.blue\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    getColorString = (r, g, b) => {\r\n        let red = r.toString(16).toUpperCase();\r\n        let green = g.toString(16).toUpperCase();\r\n        let blue = b.toString(16).toUpperCase();\r\n        if(red.length === 1){\r\n            red = \"0\"+red;\r\n        }\r\n        if(green.length === 1){\r\n            green = \"0\"+green;\r\n        }\r\n        if(blue.length === 1){\r\n            blue = \"0\"+blue;\r\n        }\r\n        return \"#\"+red+green+blue;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"colorListMainDiv\">\r\n                <h3>{this.getColorPickerHeaderText()}</h3>\r\n                <div className=\"circlePickerDiv\">\r\n                    <CirclePicker colors={this.getColorList()} width=\"295px\" onChangeComplete={this.handleSelectColor} color={this.getSelectedColor()}/>\r\n                </div>\r\n                {this.toggleCustomColorPicker()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorList;","import React, { Component } from 'react'\r\nimport './../css/AnimationList.css';\r\n\r\nconst animations = [\r\n    \"Static\",\r\n    \"Blink\",\r\n    \"Pulse\",\r\n    \"Wave\",\r\n    \"Wave Alternate\",\r\n    \"Roll\",\r\n    \"Roll Alternate\",\r\n    \"Stack\",\r\n    \"Stack Alternate\"\r\n];\r\n\r\nexport class AnimationList extends Component {\r\n\r\n    switchAnimation = (e) => {\r\n        let index = animations.indexOf(e.target.value);\r\n        if(index > -1){\r\n            this.props.stateUpdaters.updateCommandState(index, this.props.state.commandState.delay);\r\n        }\r\n    }\r\n\r\n    getSelectedAnimation = () => {\r\n        return animations[this.props.state.commandState.animation];\r\n    }\r\n\r\n    getDelayValue = () => {\r\n        return this.props.state.commandState.delay;\r\n    }\r\n\r\n    updateDelayValue = (e) => {\r\n        let delay = parseInt(e.target.value);\r\n        if(isNaN(delay) || delay < 10){\r\n            delay = 10;\r\n        }\r\n        this.props.stateUpdaters.updateCommandState(this.props.state.commandState.animation, delay);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"animationListMainDiv\">\r\n                <h3>Select Animation</h3>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Animation: \r\n                        <select className=\"inRowDisplayInput\" onChange={this.switchAnimation} value={this.getSelectedAnimation()}>\r\n                            {animations.map(animation => <option key={animation} value={animation}> {animation} </option>)}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label className=\"inRowDisplayLabel\">Delay:<input className=\"inRowDisplayInput indentText\" type=\"number\" min=\"10\" name=\"delay\" value={this.getDelayValue()} onChange={this.updateDelayValue}/></label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnimationList\r\n","import React, { Component } from 'react'\r\nimport './../css/ChannelSelector.css';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\n\r\nexport class ChannelSelector extends Component {\r\n\r\n    updateChannel = async (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null && this.props.state.channelState.channelDescriptions !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = (this.props.state.channelState.editedChannelDescription.numLEDs !== null) ? this.props.state.channelState.editedChannelDescription.numLEDs : this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            let type = (this.props.state.channelState.editedChannelDescription.type !== null) ? this.props.state.channelState.editedChannelDescription.type : this.props.state.channelState.channelDescriptions[id].type\r\n            let order = (this.props.state.channelState.editedChannelDescription.order !== null) ? this.props.state.channelState.editedChannelDescription.order : this.props.state.channelState.channelDescriptions[id].order\r\n            let position = (this.props.state.channelState.editedChannelDescription.position !== null) ? this.props.state.channelState.editedChannelDescription.position : this.props.state.channelState.channelDescriptions[id].position\r\n            let used = this.props.state.channelState.selectedChannelList[id];\r\n            let isInterior = (this.props.state.channelState.editedChannelDescription.isInterior !== null) ? this.props.state.channelState.editedChannelDescription.isInterior : this.props.state.channelState.channelDescriptions[id].isInterior\r\n            let isCentered = (this.props.state.channelState.editedChannelDescription.isCentered !== null) ? this.props.state.channelState.editedChannelDescription.isCentered : this.props.state.channelState.channelDescriptions[id].isCentered\r\n            let height = (this.props.state.channelState.editedChannelDescription.height !== null) ? this.props.state.channelState.editedChannelDescription.height : this.props.state.channelState.channelDescriptions[id].height\r\n            let width = (this.props.state.channelState.editedChannelDescription.width !== null) ? this.props.state.channelState.editedChannelDescription.width : this.props.state.channelState.channelDescriptions[id].width;\r\n            let status = await BlueToothCommands.updateChannel(\r\n                this.props.state.deviceState.selectedDevice,\r\n                id,\r\n                type,\r\n                numLEDs,\r\n                this.getIntFromPosition(position),\r\n                order,\r\n                used,\r\n                isInterior,\r\n                isCentered,\r\n                height,\r\n                width\r\n            );\r\n\r\n            if(status){\r\n                let channelDescriptions = this.props.state.channelState.channelDescriptions;\r\n                channelDescriptions[id].numLEDs = numLEDs;\r\n                channelDescriptions[id].type = type;\r\n                channelDescriptions[id].order = order;\r\n                channelDescriptions[id].position = position;\r\n                channelDescriptions[id].isInterior = isInterior;\r\n                channelDescriptions[id].isCentered = isCentered;\r\n                this.props.stateUpdaters.updateChannelState(\r\n                    this.props.state.channelState.selectedChannelList,\r\n                    channelDescriptions,\r\n                    {   \r\n                        id: id,\r\n                        type: null,\r\n                        numLEDs: null,\r\n                        position: null,\r\n                        order: null,\r\n                        isInterior: null,\r\n                        isCentered: null,\r\n                        height: null,\r\n                        width: null\r\n                    }\r\n                );\r\n            }\r\n        }else{\r\n            //there is nothing to update\r\n        }\r\n    }\r\n\r\n    getIntFromPosition = (position) => {\r\n        let intPosition = 0;\r\n        let splitPosition = position.split(\":\");\r\n        intPosition = parseInt(splitPosition[0]) * 4\r\n        intPosition += parseInt(splitPosition[1]);\r\n        return intPosition;\r\n    }\r\n\r\n    channelClicked = (e) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        currentSelectedChannelList[e.target.value] = (currentSelectedChannelList[e.target.value] === true) ? false : true\r\n        this.props.stateUpdaters.updateChannelState(\r\n            currentSelectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            this.props.state.channelState.editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getDisabledStatus = (channelNum) => {\r\n        if(this.props.state.channelState.channelDescriptions !== null){\r\n            if(this.props.state.channelState.channelDescriptions[channelNum].stripType === 0){\r\n                return true;\r\n            }else if(this.props.state.channelState.channelDescriptions[channelNum].stripType === null){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getToggleStyle = (channel) => {\r\n        let currentSelectedChannelList = this.props.state.channelState.selectedChannelList;\r\n        let channelFound = currentSelectedChannelList[channel];\r\n        if(channelFound){\r\n            return \"channelButtonSelected\"\r\n        }else{\r\n            return \"channelButton\"\r\n        }\r\n    }\r\n\r\n    getTogglePositionStyle = (value) => {\r\n        if(this.props.state.channelState.editedChannelDescription != null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let position = this.props.state.channelState.editedChannelDescription.position;\r\n            if(position !== null){\r\n                if(value === position){\r\n                    return \"channelPositionSelectedUsed\";\r\n                }else{\r\n                    return \"channelPosition\";\r\n                }\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && value === this.props.state.channelState.channelDescriptions[id].position){\r\n                return \"channelPositionSelectedUsed\";\r\n            }else{\r\n                return \"channelPosition\";\r\n            }\r\n        }else{\r\n           return \"channelPosition\";\r\n        }\r\n    }\r\n\r\n    switchEditingChannel = (e) => {\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            {\r\n                id: parseInt(e.target.value),\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null,\r\n                isInterior: null,\r\n                isCentered: null,\r\n                height: null,\r\n                width: null\r\n            }\r\n        );\r\n    }\r\n\r\n    updateChannelPosition = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.position = e.target.value;\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateStripType = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.type = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateInterior = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.isInterior = e.target.checked\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateCentered = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.isCentered = e.target.checked\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateNumLEDs = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.numLEDs = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateHeight = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.height = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateWidth = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.width = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    updateColorOrder = (e) => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let editedChannelDescription = this.props.state.channelState.editedChannelDescription;\r\n            editedChannelDescription.order = parseInt(e.target.value);\r\n            this.props.stateUpdaters.updateChannelState(\r\n                this.props.state.channelState.selectedChannelList,\r\n                this.props.state.channelState.channelDescriptions,\r\n                editedChannelDescription\r\n            );\r\n        }\r\n    }\r\n\r\n    addEditChannels = () => {\r\n        let editedChannelDescription = null;\r\n        if(this.props.state.channelState.editedChannelDescription === null){\r\n            editedChannelDescription = {\r\n                id: 0,\r\n                type: null,\r\n                numLEDs: null,\r\n                position: null,\r\n                order: null,\r\n                isInterior: null,\r\n                isCentered: null,\r\n                height: null,\r\n                width: null\r\n            }\r\n        }\r\n        this.props.stateUpdaters.updateChannelState(\r\n            this.props.state.channelState.selectedChannelList,\r\n            this.props.state.channelState.channelDescriptions,\r\n            editedChannelDescription\r\n        );\r\n    }\r\n\r\n    getNumLEDsValue = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let numLEDs = this.props.state.channelState.editedChannelDescription.numLEDs;\r\n            if(numLEDs !== null){\r\n                return numLEDs\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].numLEDs !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].numLEDs\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getHeight = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let height = this.props.state.channelState.editedChannelDescription.height;\r\n            if(height !== null){\r\n                return height\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].height !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].height\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getWidth = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let width = this.props.state.channelState.editedChannelDescription.width;\r\n            if(width !== null){\r\n                return width\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].width !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].width\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedChannel = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return this.props.state.channelState.editedChannelDescription.id;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedColorOrder = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let order = this.props.state.channelState.editedChannelDescription.order;\r\n            if(order !== null){\r\n                return order\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].order !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].order\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getSelectedStripType = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let type = this.props.state.channelState.editedChannelDescription.type;\r\n            if(type !== null){\r\n                return type\r\n            }else if(this.props.state.channelState.channelDescriptions !== null\r\n                && this.props.state.channelState.channelDescriptions[id].type !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].type\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getInteriorCheckedState = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let interiorValue = this.props.state.channelState.editedChannelDescription.isInterior;\r\n            if(interiorValue != null) {\r\n                return interiorValue\r\n            }else if(this.props.state.channelState.channelDescriptions !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].isInterior\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getCenteredCheckedState = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            let id = this.props.state.channelState.editedChannelDescription.id;\r\n            let interiorValue = this.props.state.channelState.editedChannelDescription.isCentered;\r\n            if(interiorValue != null) {\r\n                return interiorValue\r\n            }else if(this.props.state.channelState.channelDescriptions !== null){\r\n                return this.props.state.channelState.channelDescriptions[id].isCentered\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showAddEditDescription = () => {\r\n        if(this.props.state.channelState.editedChannelDescription !== null){\r\n            return <React.Fragment>\r\n                <div className=\"channelAddEditDiv\">\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Channel:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" onChange={this.switchEditingChannel} value={this.getSelectedChannel()}>\r\n                                <option value={0}>0</option>\r\n                                <option value={1}>1</option>\r\n                                <option value={2}>2</option>\r\n                                <option value={3}>3</option>\r\n                                <option value={4}>4</option>\r\n                                <option value={5}>5</option>\r\n                                <option value={6}>6</option>\r\n                                <option value={7}>7</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>LED Count:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"numLEDs\" value={this.getNumLEDsValue()} maxLength=\"3\" onChange={this.updateNumLEDs}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Height:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"height\" value={this.getHeight()} maxLength=\"3\" onChange={this.updateHeight}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Width:</label>\r\n                        <div className=\"column\">\r\n                            <input className=\"channelTextInput rightColumn\" type=\"text\" name=\"width\" value={this.getWidth()} maxLength=\"3\" onChange={this.updateWidth}/> \r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Color Order:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" value={this.getSelectedColorOrder()} onChange={this.updateColorOrder}>\r\n                                <option value={0}>RGB</option>\r\n                                <option value={1}>RBG</option>\r\n                                <option value={2}>BRG</option>\r\n                                <option value={3}>BGR</option>\r\n                                <option value={4}>GBR</option>\r\n                                <option value={5}>GRB</option>\r\n                            </select>\r\n                        </div>                        \r\n                    </div>\r\n                    <div className='row'>\r\n                        <label className='column leftColumn'>Strip Type:</label>\r\n                        <div className=\"column\">\r\n                            <select className=\"channelInput rightColumn\" value={this.getSelectedStripType()} onChange={this.updateStripType}>\r\n                                <option value={0}>NONE</option>\r\n                                <option value={1}>NEO KHZ800</option>\r\n                                <option value={2}>NEO KHZ400</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='column inlineColumn'>\r\n                            <input name=\"isInterior\" type=\"checkbox\" checked={this.getInteriorCheckedState()} onChange={this.updateInterior}/>\r\n                            <label>In Interior?</label>\r\n                        </div>\r\n                        <div className=\"column inlineColumn\">\r\n                            <input name=\"isCentered\" type=\"checkbox\" checked={this.getCenteredCheckedState()} onChange={this.updateCentered}/>\r\n                            <label>Is Centered?</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"channelPositionDiv\" >\r\n                        <label>Strip Position:\r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"0:0\")} type=\"button\" value=\"0:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:1\")} type=\"button\" value=\"0:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"0:2\")} type=\"button\" value=\"0:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"1:0\")} type=\"button\" value=\"1:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:1\")} type=\"button\" value=\"1:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"1:2\")} type=\"button\" value=\"1:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"2:0\")} type=\"button\" value=\"2:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:1\")} type=\"button\" value=\"2:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"2:2\")} type=\"button\" value=\"2:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n                            <div>\r\n                                <input className={this.getTogglePositionStyle(\"3:0\")} type=\"button\" value=\"3:0\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:1\")} type=\"button\" value=\"3:1\" onClick={this.updateChannelPosition}/>\r\n                                <input className={this.getTogglePositionStyle(\"3:2\")} type=\"button\" value=\"3:2\" onClick={this.updateChannelPosition}/>\r\n                            </div>  \r\n\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <input className=\"channelButton channelInput\" type=\"button\" value=\"Update Channel\" onClick={this.updateChannel}/>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"channelSelectorMainDiv\">\r\n                <h3>Select Channels</h3>\r\n                <div className=\"channelsDiv\">\r\n                    <input className=\"channelButton channelInput\" type=\"button\" name=\"addEditChannels\" value=\"Add/Edit Channels\" onClick={this.addEditChannels}/>\r\n                    {this.showAddEditDescription()}\r\n                    <div>\r\n                        <input disabled={this.getDisabledStatus(0)} className={this.getToggleStyle(0)} type=\"button\" name=\"channel0\" value={0} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(1)} className={this.getToggleStyle(1)} type=\"button\" name=\"channel1\" value={1} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(2)} className={this.getToggleStyle(2)} type=\"button\" name=\"channel2\" value={2} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(3)} className={this.getToggleStyle(3)} type=\"button\" name=\"channel3\" value={3} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(4)} className={this.getToggleStyle(4)} type=\"button\" name=\"channel4\" value={4} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(5)} className={this.getToggleStyle(5)} type=\"button\" name=\"channel5\" value={5} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(6)} className={this.getToggleStyle(6)} type=\"button\" name=\"channel6\" value={6} onClick={this.channelClicked}/>\r\n                        <input disabled={this.getDisabledStatus(7)} className={this.getToggleStyle(7)} type=\"button\" name=\"channel7\" value={7} onClick={this.channelClicked}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChannelSelector\r\n","import React, { Component } from 'react';\r\nimport ColorList from './ColorList';\r\nimport AnimationList from './AnimationList';\r\nimport ChannelSelector from './ChannelSelector';\r\nimport BlueToothCommands from './../shared/BlueToothCommands';\r\nimport './../css/DisplayBuilder.css';\r\n\r\nexport class DisplayBuilder extends Component {\r\n\r\n    writeToDevice = async (e) => {\r\n        try{\r\n            BlueToothCommands.updateCommand(\r\n                this.props.state.deviceState.selectedDevice,\r\n                this.props.state.primaryColorState,\r\n                this.props.state.secondaryColorState,\r\n                this.props.state.commandState\r\n            );\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"displayBuilderMainDiv\">\r\n                <h2>Display Builder</h2>\r\n                <ChannelSelector state={this.props.state} stateUpdaters={this.props.stateUpdaters} />\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"primary\"/>\r\n                <ColorList state={this.props.state} stateUpdaters={this.props.stateUpdaters} type=\"secondary\"/>\r\n                <AnimationList state={this.props.state} stateUpdaters={this.props.stateUpdaters}/>\r\n                <div>\r\n                    <input className=\"displayBuilderButton\" type=\"button\" value=\"Write To Device\" onClick={this.writeToDevice}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayBuilder","import React from 'react';\nimport DeviceSelector from './components/DeviceSelector';\nimport DisplayBuilder from './components/DisplayBuilder';\n\nimport './css/App.css';\n\nclass App extends React.Component {\n\n  state = {\n    deviceState: {\n      selectedDevice: null,\n      connectionStatus: 0, //0 is disconnected, 1 is connecting, 2 is connected\n      lightsOn: true,\n      interiorLightsOn: true\n    },\n    channelState: {\n      selectedChannelList: [false, false, false, false, false, false, false, false],\n      channelDescriptions: null,\n      editedChannelDescription: null\n    },\n    primaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    secondaryColorState: {\n      colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"],\n      isPickingColor: false,\n      red: 255,\n      green: 0,\n      blue: 255,\n    },\n    commandState: {\n      animation: 0,\n      delay: 0,\n    }\n  }\n\n  updateDeviceState = (selectedDevice, connectionStatus, lightsOn, interiorLightsOn) =>{\n    let state = {\n      selectedDevice: selectedDevice,\n      connectionStatus: connectionStatus,\n      lightsOn: lightsOn,\n      interiorLightsOn: interiorLightsOn\n    }\n    this.setState({deviceState: state});\n  }\n\n  updateChannelState = (selectedChannelList, channelDescriptions, editedChannelDescription) => {\n    let state = {\n      selectedChannelList: selectedChannelList,\n      channelDescriptions: channelDescriptions,\n      editedChannelDescription: editedChannelDescription\n    }\n    this.setState({channelState: state});\n  }\n\n  updatePrimaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({primaryColorState: state});\n  }\n\n  updateSecondaryColorState = (colorList, isPickingColor, red, green, blue) => {\n    let state = {\n      colorList: colorList,\n      isPickingColor: isPickingColor,\n      red: red,\n      green: green,\n      blue: blue\n    }\n    this.setState({secondaryColorState: state});\n  }\n\n  updateCommandState = (animation, delay) => {\n    let state = {\n      animation: animation,\n      delay: delay\n    }\n    this.setState({commandState: state});\n  }\n\n  updateAllStates = (updates) => {\n    try{\n      let deviceState = {\n        selectedDevice: updates.server,\n        connectionStatus: 2, //connected\n        lightsOn: updates.data.lightsOn,\n        interiorLightsOn: updates.data.interiorLightsOn\n      }\n\n      let primaryColorState = {\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.primaryRed,\n        green: updates.data.command.primaryGreen,\n        blue: updates.data.command.primaryBlue\n      }\n\n      let secondaryColorState = { //currently matches primary, need to add full secondary color functionality\n        colorList: [\"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\"], //need to find a way to add selected color to list incase it is not already there\n        isPickingColor: false,\n        red: updates.data.command.secondaryRed,\n        green: updates.data.command.secondaryGreen,\n        blue: updates.data.command.secondaryBlue\n      }\n\n      let commandState = {\n        animation: updates.data.command.animation,\n        delay: updates.data.command.stepDelay\n      }\n\n      let channelState = {\n        selectedChannelList: this.getSelectedChannelList(updates.data.channels),\n        channelDescriptions: this.getChannelDescriptions(updates.data.channels),\n        editedChannelDescription: null\n      }\n\n      this.setState({\n        deviceState: deviceState,\n        channelState: channelState,\n        primaryColorState: primaryColorState,\n        secondaryColorState: secondaryColorState,\n        commandState: commandState\n      });\n    }catch(e){\n      alert(e);\n    }\n  }\n\n  getSelectedChannelList = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      if(descriptions != null && descriptions[i] != null){\n        if(descriptions[i].stripUsed === 1){\n          returnArray.push(true);\n        }else{\n          returnArray.push(false);\n        }\n      }else{\n        returnArray.push(false);\n      }\n    }\n    return returnArray;\n  }\n\n  getPositionFromInt = (intPosition) => {\n    let numCols = 3;\n    let row = Math.floor(intPosition / numCols);\n    let col = intPosition % numCols;\n    return row.toString() +\":\"+col.toString()\n  }\n\n  getChannelDescriptions = (descriptions) => {\n    let returnArray = [];\n    for(let i=0; i<8; i++){\n      let entry = null;\n      if(descriptions != null && descriptions[i] != null){\n        entry = {\n          id: i,\n          type: descriptions[i].stripType,\n          numLEDs: descriptions[i].numLEDs,\n          position: this.getPositionFromInt(descriptions[i].stripPosition),\n          order: descriptions[i].stripOrder,\n          used: descriptions[i].stripUsed,\n          isInterior: descriptions[i].isInterior,\n          isCentered: descriptions[i].isCentered,\n          height: descriptions[i].height,\n          width: descriptions[i].width\n        }\n      }else{\n        entry = {\n          id: i,\n          type: null,\n          numLEDs: null,\n          position: null,\n          order: null,\n          used: false,\n          isInterior: false,\n          isCentered: false,\n          height: null,\n          width: null\n        }\n      }\n      returnArray.push(entry);\n    }\n    return returnArray;\n  }\n\n  stateUpdaters = {\n    updateDeviceState: this.updateDeviceState,\n    updateChannelState: this.updateChannelState,\n    updatePrimaryColorState: this.updatePrimaryColorState,\n    updateSecondaryColorState: this.updateSecondaryColorState,\n    updateCommandState: this.updateCommandState,\n    updateAllStates: this.updateAllStates\n  }\n\n  showDisplayBuilder = () =>{\n    if(this.state.deviceState.connectionStatus === 2){ //should check for 2 (connected), using 0 while in development\n      return (\n        <React.Fragment>\n          <DisplayBuilder state={this.state} stateUpdaters={this.stateUpdaters}/>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <DeviceSelector stateUpdaters={this.stateUpdaters} state={this.state} />\n        {this.showDisplayBuilder()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}